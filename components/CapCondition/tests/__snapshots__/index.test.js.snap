// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CapCondition It should render the CapCondition component 1`] = `
<Wrapper
  conditionExpression={
    Object {
      "operand": null,
      "operator": "EQ",
    }
  }
  conditionValidationError={null}
  criteria="include"
  dataType="DOUBLE"
  fact="Price"
  setConditionExpression={[MockFunction]}
  setConditionValidationError={[MockFunction]}
  setCriteria={[MockFunction]}
>
  <CapCondition
    andMsg="and"
    conditionExpression={
      Object {
        "operand": null,
        "operator": "EQ",
      }
    }
    conditionValidationError={null}
    criteria="include"
    dataType="DOUBLE"
    equalMsg="equal to"
    excludeMsg="exclude"
    fact="Price"
    greaterThanMsg="greater than"
    greaterThanOrEqualMsg="greater than or equal to"
    inRangeMsg="in range"
    includeMsg="include"
    isMsg="is"
    lessThanMsg="less than"
    lessThanorEqualMsg="less than or equal"
    notEqualMsg="not equal to"
    setConditionExpression={[MockFunction]}
    setConditionValidationError={[MockFunction]}
    setCriteria={[MockFunction]}
    whoseMsg="Whose"
  >
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-kAzzGY",
              "isStatic": false,
              "lastClassName": "kbSbYI",
              "rules": Array [
                "
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  & > * {
    margin: 6px 4px;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-kAzzGY",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-kAzzGY kbSbYI"
        >
          <_class
            labelPosition="top"
            onChange={[Function]}
            options={
              Array [
                Object {
                  "key": "0",
                  "label": "include",
                  "value": "include",
                },
                Object {
                  "key": "1",
                  "label": "exclude",
                  "value": "exclude",
                },
              ]
            }
            size="medium"
            style={
              Object {
                "width": "100px",
              }
            }
            value="include"
          >
            <styled.div
              className="component-with-label"
              labelPosition="top"
            >
              <StyledComponent
                className="component-with-label"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-ifAKCX",
                      "isStatic": false,
                      "lastClassName": "IhtIz",
                      "rules": Array [
                        "
  &.component-with-label {
    display: ",
                        [Function],
                        ";
    cursor: ",
                        [Function],
                        ";
    input,
    .ant-input-number,
    textarea {
      &::-webkit-input-placeholder {
        font-size: 14px;
      }
      &.ant-input:hover, &.ant-input-number:hover {
        border-color: ",
                        [Function],
                        ";
        box-shadow: none;
      }
      &.ant-input:focus, &.ant-input-number:focus {
        border-color: ",
                        [Function],
                        ";
        box-shadow: none;
      }
      &:not(.ant-calendar-range-picker-input) {
        width: ",
                        [Function],
                        ";
      }
      border-color: ",
                        [Function],
                        ";
    }
    .ant-input-affix-wrapper {
      width: ",
                        [Function],
                        ";

      & > input {
        width: 100%;
      }
    }
    .ant-input-number {
      border-width: 1px;
      border-style: solid;
      border-color: ",
                        [Function],
                        ";
    }
    .ant-input-affix-wrapper .ant-input-suffix {
      right: 8px;
    }
    .ant-input-affix-wrapper .ant-input-prefix {
      left: 8px;
    }
    .ant-select.cap-select-v2 {
      &.ant-select-enabled.ant-select-focused .ant-select-selection,
      &.ant-select-enabled .ant-select-selection,
      &.ant-select-enabled .ant-select-selection {
        border-color: ",
                        [Function],
                        ";
      }
    }
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-ifAKCX",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                labelPosition="top"
              >
                <div
                  className="sc-ifAKCX IhtIz component-with-label"
                >
                  <styled.div
                    labelPosition="top"
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "lastClassName": "hNMQHj",
                            "rules": Array [
                              "  
  display: ",
                              [Function],
                              ";  
  align-items: ",
                              [Function],
                              ";  
  justify-content: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      labelPosition="top"
                    >
                      <div
                        className="sc-EHOje hNMQHj"
                      >
                        <CapSelect
                          getPopupContainer={[Function]}
                          onChange={[Function]}
                          options={
                            Array [
                              Object {
                                "key": "0",
                                "label": "include",
                                "value": "include",
                              },
                              Object {
                                "key": "1",
                                "label": "exclude",
                                "value": "exclude",
                              },
                            ]
                          }
                          size="medium"
                          style={
                            Object {
                              "width": "100px",
                            }
                          }
                          value="include"
                        >
                          <Select
                            choiceTransitionName="zoom"
                            className="cap-select-v2"
                            dropdownClassName="cap-select-v2-dropdown"
                            getPopupContainer={[Function]}
                            menuItemSelectedIcon={
                              <CapIcon
                                type="tick"
                              />
                            }
                            onChange={[Function]}
                            removeIcon={
                              <CapIcon
                                size="s"
                                type="close"
                              />
                            }
                            showSearch={false}
                            size="medium"
                            style={
                              Object {
                                "width": "100px",
                              }
                            }
                            suffixIcon={
                              <CapIcon
                                type="chevron-down"
                              />
                            }
                            transitionName="slide-up"
                            value="include"
                          >
                            <Select
                              allowClear={false}
                              autoClearSearchValue={true}
                              backfill={false}
                              choiceTransitionName="zoom"
                              className="cap-select-v2"
                              clearIcon={
                                <Icon
                                  className="ant-select-clear-icon"
                                  theme="filled"
                                  type="close-circle"
                                />
                              }
                              combobox={false}
                              defaultActiveFirstOption={true}
                              defaultOpen={false}
                              dropdownClassName="cap-select-v2-dropdown"
                              dropdownMatchSelectWidth={true}
                              dropdownMenuStyle={Object {}}
                              dropdownRender={[Function]}
                              dropdownStyle={Object {}}
                              getPopupContainer={[Function]}
                              inputIcon={
                                <CapIcon
                                  className="ant-select-arrow-icon"
                                  type="chevron-down"
                                />
                              }
                              labelInValue={false}
                              menuItemSelectedIcon={
                                <CapIcon
                                  className="ant-select-selected-icon"
                                  type="tick"
                                />
                              }
                              multiple={false}
                              notFoundContent={
                                <Context.Consumer>
                                  [Function]
                                </Context.Consumer>
                              }
                              onBlur={[Function]}
                              onChange={[Function]}
                              onDeselect={[Function]}
                              onFocus={[Function]}
                              onInputKeyDown={[Function]}
                              onSearch={[Function]}
                              onSelect={[Function]}
                              optionFilterProp="value"
                              optionLabelProp="children"
                              placeholder=""
                              prefixCls="ant-select"
                              removeIcon={
                                <CapIcon
                                  className="ant-select-remove-icon"
                                  size="s"
                                  type="close"
                                />
                              }
                              showAction={
                                Array [
                                  "click",
                                ]
                              }
                              showSearch={false}
                              style={
                                Object {
                                  "width": "100px",
                                }
                              }
                              suffixIcon={
                                <CapIcon
                                  type="chevron-down"
                                />
                              }
                              tabIndex={0}
                              tags={false}
                              tokenSeparators={Array []}
                              transitionName="slide-up"
                              value="include"
                            >
                              <SelectTrigger
                                ariaId="test-uuid"
                                backfillValue=""
                                combobox={false}
                                defaultActiveFirstOption={true}
                                dropdownClassName="cap-select-v2-dropdown"
                                dropdownMatchSelectWidth={true}
                                dropdownMenuStyle={Object {}}
                                dropdownRender={[Function]}
                                dropdownStyle={Object {}}
                                empty={false}
                                getPopupContainer={[Function]}
                                inputValue=""
                                menuItemSelectedIcon={
                                  <CapIcon
                                    className="ant-select-selected-icon"
                                    type="tick"
                                  />
                                }
                                multiple={false}
                                onDropdownVisibleChange={[Function]}
                                onMenuDeselect={[Function]}
                                onMenuSelect={[Function]}
                                onPopupFocus={[Function]}
                                options={Array []}
                                prefixCls="ant-select"
                                showAction={
                                  Array [
                                    "click",
                                  ]
                                }
                                showSearch={false}
                                transitionName="slide-up"
                                value={
                                  Array [
                                    "include",
                                  ]
                                }
                                visible={false}
                              >
                                <Trigger
                                  action={Array []}
                                  afterPopupVisibleChange={[Function]}
                                  ariaId="test-uuid"
                                  backfillValue=""
                                  blurDelay={0.15}
                                  builtinPlacements={
                                    Object {
                                      "bottomLeft": Object {
                                        "offset": Array [
                                          0,
                                          4,
                                        ],
                                        "overflow": Object {
                                          "adjustX": 0,
                                          "adjustY": 1,
                                        },
                                        "points": Array [
                                          "tl",
                                          "bl",
                                        ],
                                      },
                                      "topLeft": Object {
                                        "offset": Array [
                                          0,
                                          -4,
                                        ],
                                        "overflow": Object {
                                          "adjustX": 0,
                                          "adjustY": 1,
                                        },
                                        "points": Array [
                                          "bl",
                                          "tl",
                                        ],
                                      },
                                    }
                                  }
                                  combobox={false}
                                  defaultActiveFirstOption={true}
                                  defaultPopupVisible={false}
                                  destroyPopupOnHide={false}
                                  dropdownClassName="cap-select-v2-dropdown"
                                  dropdownMatchSelectWidth={true}
                                  dropdownMenuStyle={Object {}}
                                  dropdownRender={[Function]}
                                  dropdownStyle={Object {}}
                                  focusDelay={0}
                                  getDocument={[Function]}
                                  getPopupClassNameFromAlign={[Function]}
                                  getPopupContainer={[Function]}
                                  hideAction={
                                    Array [
                                      "click",
                                    ]
                                  }
                                  inputValue=""
                                  mask={false}
                                  maskClosable={true}
                                  menuItemSelectedIcon={
                                    <CapIcon
                                      className="ant-select-selected-icon"
                                      type="tick"
                                    />
                                  }
                                  mouseEnterDelay={0}
                                  mouseLeaveDelay={0.1}
                                  multiple={false}
                                  onDropdownVisibleChange={[Function]}
                                  onMenuDeselect={[Function]}
                                  onMenuSelect={[Function]}
                                  onPopupAlign={[Function]}
                                  onPopupVisibleChange={[Function]}
                                  options={Array []}
                                  popup={
                                    <DropdownMenu
                                      ariaId="test-uuid"
                                      backfillValue=""
                                      defaultActiveFirstOption={true}
                                      dropdownMenuStyle={Object {}}
                                      inputValue=""
                                      menuItemSelectedIcon={
                                        <CapIcon
                                          className="ant-select-selected-icon"
                                          type="tick"
                                        />
                                      }
                                      menuItems={Array []}
                                      multiple={false}
                                      onMenuDeselect={[Function]}
                                      onMenuSelect={[Function]}
                                      onPopupFocus={[Function]}
                                      prefixCls="ant-select-dropdown"
                                      value={
                                        Array [
                                          "include",
                                        ]
                                      }
                                      visible={false}
                                    />
                                  }
                                  popupAlign={Object {}}
                                  popupClassName="cap-select-v2-dropdown ant-select-dropdown--single"
                                  popupPlacement="bottomLeft"
                                  popupStyle={Object {}}
                                  popupTransitionName="slide-up"
                                  popupVisible={false}
                                  prefixCls="ant-select-dropdown"
                                  showAction={
                                    Array [
                                      "click",
                                    ]
                                  }
                                  showSearch={false}
                                  transitionName="slide-up"
                                  value={
                                    Array [
                                      "include",
                                    ]
                                  }
                                  visible={false}
                                >
                                  <div
                                    className="cap-select-v2 ant-select ant-select-enabled"
                                    key="trigger"
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseOut={[Function]}
                                    onMouseUp={[Function]}
                                    onTouchStart={[Function]}
                                    style={
                                      Object {
                                        "width": "100px",
                                      }
                                    }
                                  >
                                    <div
                                      aria-autocomplete="list"
                                      aria-controls="test-uuid"
                                      aria-expanded={false}
                                      aria-haspopup="true"
                                      className="ant-select-selection
            ant-select-selection--single"
                                      key="selection"
                                      onKeyDown={[Function]}
                                      role="combobox"
                                      tabIndex={0}
                                    >
                                      <div
                                        className="ant-select-selection__rendered"
                                      >
                                        <div
                                          className="ant-select-selection-selected-value"
                                          key="value"
                                          style={
                                            Object {
                                              "display": "block",
                                              "opacity": 1,
                                            }
                                          }
                                          title="include"
                                        >
                                          include
                                        </div>
                                      </div>
                                      <span
                                        className="ant-select-arrow"
                                        key="arrow"
                                        onClick={[Function]}
                                        style={
                                          Object {
                                            "WebkitUserSelect": "none",
                                            "userSelect": "none",
                                          }
                                        }
                                        unselectable="on"
                                      >
                                        <CapIcon
                                          className="ant-select-arrow-icon"
                                          type="chevron-down"
                                        >
                                          <Styled(Icon)
                                            className="cap-icon-v2 cap-icon-v2-chevron-down ant-select-arrow-icon"
                                            component={[Function]}
                                          >
                                            <StyledComponent
                                              className="cap-icon-v2 cap-icon-v2-chevron-down ant-select-arrow-icon"
                                              component={[Function]}
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-bxivhb",
                                                    "isStatic": false,
                                                    "lastClassName": "kZDkVS",
                                                    "rules": Array [
                                                      "
  font-size: ",
                                                      [Function],
                                                      ";
",
                                                    ],
                                                  },
                                                  "createFromIconfontCN": [Function],
                                                  "displayName": "Styled(Icon)",
                                                  "foldedComponentIds": Array [],
                                                  "getTwoToneColor": [Function],
                                                  "render": [Function],
                                                  "setTwoToneColor": [Function],
                                                  "styledComponentId": "sc-bxivhb",
                                                  "target": [Function],
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <Icon
                                                className="sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-chevron-down ant-select-arrow-icon"
                                                component={[Function]}
                                              >
                                                <LocaleReceiver
                                                  componentName="Icon"
                                                >
                                                  <i
                                                    className="anticon sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-chevron-down ant-select-arrow-icon"
                                                  >
                                                    <component
                                                      aria-hidden={true}
                                                      className=""
                                                      fill="currentColor"
                                                      focusable="false"
                                                      height="1em"
                                                      width="1em"
                                                    >
                                                      <SvgChevronDown>
                                                        <svg
                                                          fill="currentColor"
                                                          height="1em"
                                                          viewBox="0 0 24 24"
                                                          width="1em"
                                                        >
                                                          <path
                                                            d="M11.293 14.993L6.7 10.4A.99.99 0 0 1 8.1 9l3.9 3.9L15.9 9a.99.99 0 0 1 1.4 1.4l-4.593 4.593a1 1 0 0 1-1.414 0z"
                                                            id="chevron-down_svg__a"
                                                          />
                                                        </svg>
                                                      </SvgChevronDown>
                                                    </component>
                                                  </i>
                                                </LocaleReceiver>
                                              </Icon>
                                            </StyledComponent>
                                          </Styled(Icon)>
                                        </CapIcon>
                                      </span>
                                    </div>
                                  </div>
                                </Trigger>
                              </SelectTrigger>
                            </Select>
                          </Select>
                        </CapSelect>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </div>
              </StyledComponent>
            </styled.div>
          </_class>
          <styled.span
            type="label18"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-cSHVUG",
                    "isStatic": false,
                    "lastClassName": "hiQHue",
                    "rules": Array [
                      "
font-size: ",
                      [Function],
                      ";
font-weight: ",
                      [Function],
                      ";
color: ",
                      [Function],
                      ";
line-height: ",
                      [Function],
                      ";
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-cSHVUG",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              type="label18"
            >
              <span
                className="sc-cSHVUG hiQHue"
                type="label18"
              >
                Whose
              </span>
            </StyledComponent>
          </styled.span>
          <Styled(styled.div)
            type="label2"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "CapLabelInline": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-cSHVUG",
                      "isStatic": false,
                      "lastClassName": "hiQHue",
                      "rules": Array [
                        "
font-size: ",
                        [Function],
                        ";
font-weight: ",
                        [Function],
                        ";
color: ",
                        [Function],
                        ";
line-height: ",
                        [Function],
                        ";
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-cSHVUG",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "_foldedDefaultProps": Object {
                    "type": "label1",
                  },
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-chPdSV",
                    "isStatic": false,
                    "lastClassName": "bsXLwl",
                    "rules": Array [
                      "
    font-size: ",
                      [Function],
                      ";
    font-weight: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
    line-height: ",
                      [Function],
                      ";
    ",
                      "
  background-color: #ecece7;
  border-radius: 16px;
  height:32px;
  padding:9px 13px;
",
                    ],
                  },
                  "displayName": "Styled(styled.div)",
                  "foldedComponentIds": Array [
                    "sc-jzJRlG",
                  ],
                  "propTypes": Object {
                    "children": [Function],
                    "type": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-chPdSV",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              type="label2"
            >
              <div
                className="sc-jzJRlG sc-chPdSV bsXLwl"
                type="label2"
              >
                Price
              </div>
            </StyledComponent>
          </Styled(styled.div)>
          <styled.span
            type="label18"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-cSHVUG",
                    "isStatic": false,
                    "lastClassName": "hiQHue",
                    "rules": Array [
                      "
font-size: ",
                      [Function],
                      ";
font-weight: ",
                      [Function],
                      ";
color: ",
                      [Function],
                      ";
line-height: ",
                      [Function],
                      ";
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-cSHVUG",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              type="label18"
            >
              <span
                className="sc-cSHVUG hiQHue"
                type="label18"
              >
                is
              </span>
            </StyledComponent>
          </styled.span>
          <Wrapper
            conditionExpression={
              Object {
                "operand": null,
                "operator": "EQ",
              }
            }
            conditionValidationError={null}
            setConditionExpression={[MockFunction]}
            setConditionValidationError={[MockFunction]}
          >
            <ConditionNumber
              andMsg="and"
              conditionExpression={
                Object {
                  "operand": null,
                  "operator": "EQ",
                }
              }
              conditionValidationError={null}
              equalMsg="equal to"
              excludeMsg="exclude"
              greaterThanMsg="greater than"
              greaterThanOrEqualMsg="greater than or equal to"
              inRangeMsg="in range"
              includeMsg="include"
              isMsg="is"
              lessThanMsg="less than"
              lessThanorEqualMsg="less than or equal"
              notEqualMsg="not equal to"
              setConditionExpression={[MockFunction]}
              setConditionValidationError={[MockFunction]}
              whoseMsg="Whose"
            >
              <styled.div
                className="cap-condition-number"
              >
                <StyledComponent
                  className="cap-condition-number"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-kAzzGY",
                        "isStatic": false,
                        "lastClassName": "kbSbYI",
                        "rules": Array [
                          "
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  & > * {
    margin: 6px 4px;
  }
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-kAzzGY",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="sc-kAzzGY kbSbYI cap-condition-number"
                  >
                    <_class
                      labelPosition="top"
                      onChange={[Function]}
                      options={
                        Array [
                          Object {
                            "key": "EQ",
                            "label": "equal to",
                            "value": "EQ",
                          },
                          Object {
                            "key": "GT",
                            "label": "greater than",
                            "value": "GT",
                          },
                          Object {
                            "key": "LT",
                            "label": "less than",
                            "value": "LT",
                          },
                          Object {
                            "key": "GTE",
                            "label": "greater than or equal to",
                            "value": "GTE",
                          },
                          Object {
                            "key": "LTE",
                            "label": "less than or equal",
                            "value": "LTE",
                          },
                          Object {
                            "key": "IN_RANGE",
                            "label": "in range",
                            "value": "IN_RANGE",
                          },
                          Object {
                            "key": "NEQ",
                            "label": "not equal to",
                            "value": "NEQ",
                          },
                        ]
                      }
                      size="medium"
                      style={
                        Object {
                          "width": "100px",
                        }
                      }
                      value="EQ"
                    >
                      <styled.div
                        className="component-with-label"
                        labelPosition="top"
                      >
                        <StyledComponent
                          className="component-with-label"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-ifAKCX",
                                "isStatic": false,
                                "lastClassName": "IhtIz",
                                "rules": Array [
                                  "
  &.component-with-label {
    display: ",
                                  [Function],
                                  ";
    cursor: ",
                                  [Function],
                                  ";
    input,
    .ant-input-number,
    textarea {
      &::-webkit-input-placeholder {
        font-size: 14px;
      }
      &.ant-input:hover, &.ant-input-number:hover {
        border-color: ",
                                  [Function],
                                  ";
        box-shadow: none;
      }
      &.ant-input:focus, &.ant-input-number:focus {
        border-color: ",
                                  [Function],
                                  ";
        box-shadow: none;
      }
      &:not(.ant-calendar-range-picker-input) {
        width: ",
                                  [Function],
                                  ";
      }
      border-color: ",
                                  [Function],
                                  ";
    }
    .ant-input-affix-wrapper {
      width: ",
                                  [Function],
                                  ";

      & > input {
        width: 100%;
      }
    }
    .ant-input-number {
      border-width: 1px;
      border-style: solid;
      border-color: ",
                                  [Function],
                                  ";
    }
    .ant-input-affix-wrapper .ant-input-suffix {
      right: 8px;
    }
    .ant-input-affix-wrapper .ant-input-prefix {
      left: 8px;
    }
    .ant-select.cap-select-v2 {
      &.ant-select-enabled.ant-select-focused .ant-select-selection,
      &.ant-select-enabled .ant-select-selection,
      &.ant-select-enabled .ant-select-selection {
        border-color: ",
                                  [Function],
                                  ";
      }
    }
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-ifAKCX",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          labelPosition="top"
                        >
                          <div
                            className="sc-ifAKCX IhtIz component-with-label"
                          >
                            <styled.div
                              labelPosition="top"
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-EHOje",
                                      "isStatic": false,
                                      "lastClassName": "hNMQHj",
                                      "rules": Array [
                                        "  
  display: ",
                                        [Function],
                                        ";  
  align-items: ",
                                        [Function],
                                        ";  
  justify-content: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-EHOje",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                labelPosition="top"
                              >
                                <div
                                  className="sc-EHOje hNMQHj"
                                >
                                  <CapSelect
                                    getPopupContainer={[Function]}
                                    onChange={[Function]}
                                    options={
                                      Array [
                                        Object {
                                          "key": "EQ",
                                          "label": "equal to",
                                          "value": "EQ",
                                        },
                                        Object {
                                          "key": "GT",
                                          "label": "greater than",
                                          "value": "GT",
                                        },
                                        Object {
                                          "key": "LT",
                                          "label": "less than",
                                          "value": "LT",
                                        },
                                        Object {
                                          "key": "GTE",
                                          "label": "greater than or equal to",
                                          "value": "GTE",
                                        },
                                        Object {
                                          "key": "LTE",
                                          "label": "less than or equal",
                                          "value": "LTE",
                                        },
                                        Object {
                                          "key": "IN_RANGE",
                                          "label": "in range",
                                          "value": "IN_RANGE",
                                        },
                                        Object {
                                          "key": "NEQ",
                                          "label": "not equal to",
                                          "value": "NEQ",
                                        },
                                      ]
                                    }
                                    size="medium"
                                    style={
                                      Object {
                                        "width": "100px",
                                      }
                                    }
                                    value="EQ"
                                  >
                                    <Select
                                      choiceTransitionName="zoom"
                                      className="cap-select-v2"
                                      dropdownClassName="cap-select-v2-dropdown"
                                      getPopupContainer={[Function]}
                                      menuItemSelectedIcon={
                                        <CapIcon
                                          type="tick"
                                        />
                                      }
                                      onChange={[Function]}
                                      removeIcon={
                                        <CapIcon
                                          size="s"
                                          type="close"
                                        />
                                      }
                                      showSearch={false}
                                      size="medium"
                                      style={
                                        Object {
                                          "width": "100px",
                                        }
                                      }
                                      suffixIcon={
                                        <CapIcon
                                          type="chevron-down"
                                        />
                                      }
                                      transitionName="slide-up"
                                      value="EQ"
                                    >
                                      <Select
                                        allowClear={false}
                                        autoClearSearchValue={true}
                                        backfill={false}
                                        choiceTransitionName="zoom"
                                        className="cap-select-v2"
                                        clearIcon={
                                          <Icon
                                            className="ant-select-clear-icon"
                                            theme="filled"
                                            type="close-circle"
                                          />
                                        }
                                        combobox={false}
                                        defaultActiveFirstOption={true}
                                        defaultOpen={false}
                                        dropdownClassName="cap-select-v2-dropdown"
                                        dropdownMatchSelectWidth={true}
                                        dropdownMenuStyle={Object {}}
                                        dropdownRender={[Function]}
                                        dropdownStyle={Object {}}
                                        getPopupContainer={[Function]}
                                        inputIcon={
                                          <CapIcon
                                            className="ant-select-arrow-icon"
                                            type="chevron-down"
                                          />
                                        }
                                        labelInValue={false}
                                        menuItemSelectedIcon={
                                          <CapIcon
                                            className="ant-select-selected-icon"
                                            type="tick"
                                          />
                                        }
                                        multiple={false}
                                        notFoundContent={
                                          <Context.Consumer>
                                            [Function]
                                          </Context.Consumer>
                                        }
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onDeselect={[Function]}
                                        onFocus={[Function]}
                                        onInputKeyDown={[Function]}
                                        onSearch={[Function]}
                                        onSelect={[Function]}
                                        optionFilterProp="value"
                                        optionLabelProp="children"
                                        placeholder=""
                                        prefixCls="ant-select"
                                        removeIcon={
                                          <CapIcon
                                            className="ant-select-remove-icon"
                                            size="s"
                                            type="close"
                                          />
                                        }
                                        showAction={
                                          Array [
                                            "click",
                                          ]
                                        }
                                        showSearch={false}
                                        style={
                                          Object {
                                            "width": "100px",
                                          }
                                        }
                                        suffixIcon={
                                          <CapIcon
                                            type="chevron-down"
                                          />
                                        }
                                        tabIndex={0}
                                        tags={false}
                                        tokenSeparators={Array []}
                                        transitionName="slide-up"
                                        value="EQ"
                                      >
                                        <SelectTrigger
                                          ariaId="test-uuid"
                                          backfillValue=""
                                          combobox={false}
                                          defaultActiveFirstOption={true}
                                          dropdownClassName="cap-select-v2-dropdown"
                                          dropdownMatchSelectWidth={true}
                                          dropdownMenuStyle={Object {}}
                                          dropdownRender={[Function]}
                                          dropdownStyle={Object {}}
                                          empty={false}
                                          getPopupContainer={[Function]}
                                          inputValue=""
                                          menuItemSelectedIcon={
                                            <CapIcon
                                              className="ant-select-selected-icon"
                                              type="tick"
                                            />
                                          }
                                          multiple={false}
                                          onDropdownVisibleChange={[Function]}
                                          onMenuDeselect={[Function]}
                                          onMenuSelect={[Function]}
                                          onPopupFocus={[Function]}
                                          options={Array []}
                                          prefixCls="ant-select"
                                          showAction={
                                            Array [
                                              "click",
                                            ]
                                          }
                                          showSearch={false}
                                          transitionName="slide-up"
                                          value={
                                            Array [
                                              "EQ",
                                            ]
                                          }
                                          visible={false}
                                        >
                                          <Trigger
                                            action={Array []}
                                            afterPopupVisibleChange={[Function]}
                                            ariaId="test-uuid"
                                            backfillValue=""
                                            blurDelay={0.15}
                                            builtinPlacements={
                                              Object {
                                                "bottomLeft": Object {
                                                  "offset": Array [
                                                    0,
                                                    4,
                                                  ],
                                                  "overflow": Object {
                                                    "adjustX": 0,
                                                    "adjustY": 1,
                                                  },
                                                  "points": Array [
                                                    "tl",
                                                    "bl",
                                                  ],
                                                },
                                                "topLeft": Object {
                                                  "offset": Array [
                                                    0,
                                                    -4,
                                                  ],
                                                  "overflow": Object {
                                                    "adjustX": 0,
                                                    "adjustY": 1,
                                                  },
                                                  "points": Array [
                                                    "bl",
                                                    "tl",
                                                  ],
                                                },
                                              }
                                            }
                                            combobox={false}
                                            defaultActiveFirstOption={true}
                                            defaultPopupVisible={false}
                                            destroyPopupOnHide={false}
                                            dropdownClassName="cap-select-v2-dropdown"
                                            dropdownMatchSelectWidth={true}
                                            dropdownMenuStyle={Object {}}
                                            dropdownRender={[Function]}
                                            dropdownStyle={Object {}}
                                            focusDelay={0}
                                            getDocument={[Function]}
                                            getPopupClassNameFromAlign={[Function]}
                                            getPopupContainer={[Function]}
                                            hideAction={
                                              Array [
                                                "click",
                                              ]
                                            }
                                            inputValue=""
                                            mask={false}
                                            maskClosable={true}
                                            menuItemSelectedIcon={
                                              <CapIcon
                                                className="ant-select-selected-icon"
                                                type="tick"
                                              />
                                            }
                                            mouseEnterDelay={0}
                                            mouseLeaveDelay={0.1}
                                            multiple={false}
                                            onDropdownVisibleChange={[Function]}
                                            onMenuDeselect={[Function]}
                                            onMenuSelect={[Function]}
                                            onPopupAlign={[Function]}
                                            onPopupVisibleChange={[Function]}
                                            options={Array []}
                                            popup={
                                              <DropdownMenu
                                                ariaId="test-uuid"
                                                backfillValue=""
                                                defaultActiveFirstOption={true}
                                                dropdownMenuStyle={Object {}}
                                                inputValue=""
                                                menuItemSelectedIcon={
                                                  <CapIcon
                                                    className="ant-select-selected-icon"
                                                    type="tick"
                                                  />
                                                }
                                                menuItems={Array []}
                                                multiple={false}
                                                onMenuDeselect={[Function]}
                                                onMenuSelect={[Function]}
                                                onPopupFocus={[Function]}
                                                prefixCls="ant-select-dropdown"
                                                value={
                                                  Array [
                                                    "EQ",
                                                  ]
                                                }
                                                visible={false}
                                              />
                                            }
                                            popupAlign={Object {}}
                                            popupClassName="cap-select-v2-dropdown ant-select-dropdown--single"
                                            popupPlacement="bottomLeft"
                                            popupStyle={Object {}}
                                            popupTransitionName="slide-up"
                                            popupVisible={false}
                                            prefixCls="ant-select-dropdown"
                                            showAction={
                                              Array [
                                                "click",
                                              ]
                                            }
                                            showSearch={false}
                                            transitionName="slide-up"
                                            value={
                                              Array [
                                                "EQ",
                                              ]
                                            }
                                            visible={false}
                                          >
                                            <div
                                              className="cap-select-v2 ant-select ant-select-enabled"
                                              key="trigger"
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onFocus={[Function]}
                                              onMouseDown={[Function]}
                                              onMouseOut={[Function]}
                                              onMouseUp={[Function]}
                                              onTouchStart={[Function]}
                                              style={
                                                Object {
                                                  "width": "100px",
                                                }
                                              }
                                            >
                                              <div
                                                aria-autocomplete="list"
                                                aria-controls="test-uuid"
                                                aria-expanded={false}
                                                aria-haspopup="true"
                                                className="ant-select-selection
            ant-select-selection--single"
                                                key="selection"
                                                onKeyDown={[Function]}
                                                role="combobox"
                                                tabIndex={0}
                                              >
                                                <div
                                                  className="ant-select-selection__rendered"
                                                >
                                                  <div
                                                    className="ant-select-selection-selected-value"
                                                    key="value"
                                                    style={
                                                      Object {
                                                        "display": "block",
                                                        "opacity": 1,
                                                      }
                                                    }
                                                    title="equal to"
                                                  >
                                                    equal to
                                                  </div>
                                                </div>
                                                <span
                                                  className="ant-select-arrow"
                                                  key="arrow"
                                                  onClick={[Function]}
                                                  style={
                                                    Object {
                                                      "WebkitUserSelect": "none",
                                                      "userSelect": "none",
                                                    }
                                                  }
                                                  unselectable="on"
                                                >
                                                  <CapIcon
                                                    className="ant-select-arrow-icon"
                                                    type="chevron-down"
                                                  >
                                                    <Styled(Icon)
                                                      className="cap-icon-v2 cap-icon-v2-chevron-down ant-select-arrow-icon"
                                                      component={[Function]}
                                                    >
                                                      <StyledComponent
                                                        className="cap-icon-v2 cap-icon-v2-chevron-down ant-select-arrow-icon"
                                                        component={[Function]}
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-bxivhb",
                                                              "isStatic": false,
                                                              "lastClassName": "kZDkVS",
                                                              "rules": Array [
                                                                "
  font-size: ",
                                                                [Function],
                                                                ";
",
                                                              ],
                                                            },
                                                            "createFromIconfontCN": [Function],
                                                            "displayName": "Styled(Icon)",
                                                            "foldedComponentIds": Array [],
                                                            "getTwoToneColor": [Function],
                                                            "render": [Function],
                                                            "setTwoToneColor": [Function],
                                                            "styledComponentId": "sc-bxivhb",
                                                            "target": [Function],
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <Icon
                                                          className="sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-chevron-down ant-select-arrow-icon"
                                                          component={[Function]}
                                                        >
                                                          <LocaleReceiver
                                                            componentName="Icon"
                                                          >
                                                            <i
                                                              className="anticon sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-chevron-down ant-select-arrow-icon"
                                                            >
                                                              <component
                                                                aria-hidden={true}
                                                                className=""
                                                                fill="currentColor"
                                                                focusable="false"
                                                                height="1em"
                                                                width="1em"
                                                              >
                                                                <SvgChevronDown>
                                                                  <svg
                                                                    fill="currentColor"
                                                                    height="1em"
                                                                    viewBox="0 0 24 24"
                                                                    width="1em"
                                                                  >
                                                                    <path
                                                                      d="M11.293 14.993L6.7 10.4A.99.99 0 0 1 8.1 9l3.9 3.9L15.9 9a.99.99 0 0 1 1.4 1.4l-4.593 4.593a1 1 0 0 1-1.414 0z"
                                                                      id="chevron-down_svg__a"
                                                                    />
                                                                  </svg>
                                                                </SvgChevronDown>
                                                              </component>
                                                            </i>
                                                          </LocaleReceiver>
                                                        </Icon>
                                                      </StyledComponent>
                                                    </Styled(Icon)>
                                                  </CapIcon>
                                                </span>
                                              </div>
                                            </div>
                                          </Trigger>
                                        </SelectTrigger>
                                      </Select>
                                    </Select>
                                  </CapSelect>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </_class>
                    <_class
                      className="cap-condition-num-input-1"
                      labelPosition="top"
                      onChange={[Function]}
                      size="medium"
                      style={
                        Object {
                          "width": "95px",
                        }
                      }
                      type="number"
                      value={null}
                    >
                      <styled.div
                        className="component-with-label cap-condition-num-input-1"
                        labelPosition="top"
                      >
                        <StyledComponent
                          className="component-with-label cap-condition-num-input-1"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-ifAKCX",
                                "isStatic": false,
                                "lastClassName": "IhtIz",
                                "rules": Array [
                                  "
  &.component-with-label {
    display: ",
                                  [Function],
                                  ";
    cursor: ",
                                  [Function],
                                  ";
    input,
    .ant-input-number,
    textarea {
      &::-webkit-input-placeholder {
        font-size: 14px;
      }
      &.ant-input:hover, &.ant-input-number:hover {
        border-color: ",
                                  [Function],
                                  ";
        box-shadow: none;
      }
      &.ant-input:focus, &.ant-input-number:focus {
        border-color: ",
                                  [Function],
                                  ";
        box-shadow: none;
      }
      &:not(.ant-calendar-range-picker-input) {
        width: ",
                                  [Function],
                                  ";
      }
      border-color: ",
                                  [Function],
                                  ";
    }
    .ant-input-affix-wrapper {
      width: ",
                                  [Function],
                                  ";

      & > input {
        width: 100%;
      }
    }
    .ant-input-number {
      border-width: 1px;
      border-style: solid;
      border-color: ",
                                  [Function],
                                  ";
    }
    .ant-input-affix-wrapper .ant-input-suffix {
      right: 8px;
    }
    .ant-input-affix-wrapper .ant-input-prefix {
      left: 8px;
    }
    .ant-select.cap-select-v2 {
      &.ant-select-enabled.ant-select-focused .ant-select-selection,
      &.ant-select-enabled .ant-select-selection,
      &.ant-select-enabled .ant-select-selection {
        border-color: ",
                                  [Function],
                                  ";
      }
    }
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-ifAKCX",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          labelPosition="top"
                        >
                          <div
                            className="sc-ifAKCX IhtIz component-with-label cap-condition-num-input-1"
                          >
                            <styled.div
                              labelPosition="top"
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-EHOje",
                                      "isStatic": false,
                                      "lastClassName": "hNMQHj",
                                      "rules": Array [
                                        "  
  display: ",
                                        [Function],
                                        ";  
  align-items: ",
                                        [Function],
                                        ";  
  justify-content: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-EHOje",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                labelPosition="top"
                              >
                                <div
                                  className="sc-EHOje hNMQHj"
                                >
                                  <CapInput
                                    onChange={[Function]}
                                    size="medium"
                                    style={
                                      Object {
                                        "width": "95px",
                                      }
                                    }
                                    type="number"
                                    value={null}
                                  >
                                    <Input
                                      onChange={[Function]}
                                      size="medium"
                                      style={
                                        Object {
                                          "width": "95px",
                                        }
                                      }
                                      suffix={<span />}
                                      type="number"
                                      value={null}
                                    >
                                      <span
                                        className="ant-input-affix-wrapper"
                                        style={
                                          Object {
                                            "width": "95px",
                                          }
                                        }
                                      >
                                        <input
                                          className="ant-input"
                                          onChange={[Function]}
                                          onKeyDown={[Function]}
                                          size="medium"
                                          style={null}
                                          type="number"
                                          value=""
                                        />
                                        <span
                                          className="ant-input-suffix"
                                        >
                                          <span />
                                        </span>
                                      </span>
                                    </Input>
                                  </CapInput>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </_class>
                  </div>
                </StyledComponent>
              </styled.div>
            </ConditionNumber>
          </Wrapper>
        </div>
      </StyledComponent>
    </styled.div>
  </CapCondition>
</Wrapper>
`;

exports[`CapCondition component Should render the condition number component 1`] = `
<Wrapper
  conditionExpression={
    Object {
      "operand": null,
      "operator": "EQ",
    }
  }
  setConditionExpression={[MockFunction]}
  setConditionValidationError={[MockFunction]}
>
  <ConditionNumber
    andMsg="and"
    conditionExpression={
      Object {
        "operand": null,
        "operator": "EQ",
      }
    }
    equalMsg="equal to"
    excludeMsg="exclude"
    greaterThanMsg="greater than"
    greaterThanOrEqualMsg="greater than or equal to"
    inRangeMsg="in range"
    includeMsg="include"
    isMsg="is"
    lessThanMsg="less than"
    lessThanorEqualMsg="less than or equal"
    notEqualMsg="not equal to"
    setConditionExpression={[MockFunction]}
    setConditionValidationError={[MockFunction]}
    whoseMsg="Whose"
  >
    <styled.div
      className="cap-condition-number"
    >
      <StyledComponent
        className="cap-condition-number"
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-kAzzGY",
              "isStatic": false,
              "lastClassName": "kbSbYI",
              "rules": Array [
                "
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  & > * {
    margin: 6px 4px;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-kAzzGY",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-kAzzGY kbSbYI cap-condition-number"
        >
          <_class
            labelPosition="top"
            onChange={[Function]}
            options={
              Array [
                Object {
                  "key": "EQ",
                  "label": "equal to",
                  "value": "EQ",
                },
                Object {
                  "key": "GT",
                  "label": "greater than",
                  "value": "GT",
                },
                Object {
                  "key": "LT",
                  "label": "less than",
                  "value": "LT",
                },
                Object {
                  "key": "GTE",
                  "label": "greater than or equal to",
                  "value": "GTE",
                },
                Object {
                  "key": "LTE",
                  "label": "less than or equal",
                  "value": "LTE",
                },
                Object {
                  "key": "IN_RANGE",
                  "label": "in range",
                  "value": "IN_RANGE",
                },
                Object {
                  "key": "NEQ",
                  "label": "not equal to",
                  "value": "NEQ",
                },
              ]
            }
            size="medium"
            style={
              Object {
                "width": "100px",
              }
            }
            value="EQ"
          >
            <styled.div
              className="component-with-label"
              labelPosition="top"
            >
              <StyledComponent
                className="component-with-label"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-ifAKCX",
                      "isStatic": false,
                      "lastClassName": "IhtIz",
                      "rules": Array [
                        "
  &.component-with-label {
    display: ",
                        [Function],
                        ";
    cursor: ",
                        [Function],
                        ";
    input,
    .ant-input-number,
    textarea {
      &::-webkit-input-placeholder {
        font-size: 14px;
      }
      &.ant-input:hover, &.ant-input-number:hover {
        border-color: ",
                        [Function],
                        ";
        box-shadow: none;
      }
      &.ant-input:focus, &.ant-input-number:focus {
        border-color: ",
                        [Function],
                        ";
        box-shadow: none;
      }
      &:not(.ant-calendar-range-picker-input) {
        width: ",
                        [Function],
                        ";
      }
      border-color: ",
                        [Function],
                        ";
    }
    .ant-input-affix-wrapper {
      width: ",
                        [Function],
                        ";

      & > input {
        width: 100%;
      }
    }
    .ant-input-number {
      border-width: 1px;
      border-style: solid;
      border-color: ",
                        [Function],
                        ";
    }
    .ant-input-affix-wrapper .ant-input-suffix {
      right: 8px;
    }
    .ant-input-affix-wrapper .ant-input-prefix {
      left: 8px;
    }
    .ant-select.cap-select-v2 {
      &.ant-select-enabled.ant-select-focused .ant-select-selection,
      &.ant-select-enabled .ant-select-selection,
      &.ant-select-enabled .ant-select-selection {
        border-color: ",
                        [Function],
                        ";
      }
    }
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-ifAKCX",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                labelPosition="top"
              >
                <div
                  className="sc-ifAKCX IhtIz component-with-label"
                >
                  <styled.div
                    labelPosition="top"
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "lastClassName": "hNMQHj",
                            "rules": Array [
                              "  
  display: ",
                              [Function],
                              ";  
  align-items: ",
                              [Function],
                              ";  
  justify-content: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      labelPosition="top"
                    >
                      <div
                        className="sc-EHOje hNMQHj"
                      >
                        <CapSelect
                          getPopupContainer={[Function]}
                          onChange={[Function]}
                          options={
                            Array [
                              Object {
                                "key": "EQ",
                                "label": "equal to",
                                "value": "EQ",
                              },
                              Object {
                                "key": "GT",
                                "label": "greater than",
                                "value": "GT",
                              },
                              Object {
                                "key": "LT",
                                "label": "less than",
                                "value": "LT",
                              },
                              Object {
                                "key": "GTE",
                                "label": "greater than or equal to",
                                "value": "GTE",
                              },
                              Object {
                                "key": "LTE",
                                "label": "less than or equal",
                                "value": "LTE",
                              },
                              Object {
                                "key": "IN_RANGE",
                                "label": "in range",
                                "value": "IN_RANGE",
                              },
                              Object {
                                "key": "NEQ",
                                "label": "not equal to",
                                "value": "NEQ",
                              },
                            ]
                          }
                          size="medium"
                          style={
                            Object {
                              "width": "100px",
                            }
                          }
                          value="EQ"
                        >
                          <Select
                            choiceTransitionName="zoom"
                            className="cap-select-v2"
                            dropdownClassName="cap-select-v2-dropdown"
                            getPopupContainer={[Function]}
                            menuItemSelectedIcon={
                              <CapIcon
                                type="tick"
                              />
                            }
                            onChange={[Function]}
                            removeIcon={
                              <CapIcon
                                size="s"
                                type="close"
                              />
                            }
                            showSearch={false}
                            size="medium"
                            style={
                              Object {
                                "width": "100px",
                              }
                            }
                            suffixIcon={
                              <CapIcon
                                type="chevron-down"
                              />
                            }
                            transitionName="slide-up"
                            value="EQ"
                          >
                            <Select
                              allowClear={false}
                              autoClearSearchValue={true}
                              backfill={false}
                              choiceTransitionName="zoom"
                              className="cap-select-v2"
                              clearIcon={
                                <Icon
                                  className="ant-select-clear-icon"
                                  theme="filled"
                                  type="close-circle"
                                />
                              }
                              combobox={false}
                              defaultActiveFirstOption={true}
                              defaultOpen={false}
                              dropdownClassName="cap-select-v2-dropdown"
                              dropdownMatchSelectWidth={true}
                              dropdownMenuStyle={Object {}}
                              dropdownRender={[Function]}
                              dropdownStyle={Object {}}
                              getPopupContainer={[Function]}
                              inputIcon={
                                <CapIcon
                                  className="ant-select-arrow-icon"
                                  type="chevron-down"
                                />
                              }
                              labelInValue={false}
                              menuItemSelectedIcon={
                                <CapIcon
                                  className="ant-select-selected-icon"
                                  type="tick"
                                />
                              }
                              multiple={false}
                              notFoundContent={
                                <Context.Consumer>
                                  [Function]
                                </Context.Consumer>
                              }
                              onBlur={[Function]}
                              onChange={[Function]}
                              onDeselect={[Function]}
                              onFocus={[Function]}
                              onInputKeyDown={[Function]}
                              onSearch={[Function]}
                              onSelect={[Function]}
                              optionFilterProp="value"
                              optionLabelProp="children"
                              placeholder=""
                              prefixCls="ant-select"
                              removeIcon={
                                <CapIcon
                                  className="ant-select-remove-icon"
                                  size="s"
                                  type="close"
                                />
                              }
                              showAction={
                                Array [
                                  "click",
                                ]
                              }
                              showSearch={false}
                              style={
                                Object {
                                  "width": "100px",
                                }
                              }
                              suffixIcon={
                                <CapIcon
                                  type="chevron-down"
                                />
                              }
                              tabIndex={0}
                              tags={false}
                              tokenSeparators={Array []}
                              transitionName="slide-up"
                              value="EQ"
                            >
                              <SelectTrigger
                                ariaId="test-uuid"
                                backfillValue=""
                                combobox={false}
                                defaultActiveFirstOption={true}
                                dropdownClassName="cap-select-v2-dropdown"
                                dropdownMatchSelectWidth={true}
                                dropdownMenuStyle={Object {}}
                                dropdownRender={[Function]}
                                dropdownStyle={Object {}}
                                empty={false}
                                getPopupContainer={[Function]}
                                inputValue=""
                                menuItemSelectedIcon={
                                  <CapIcon
                                    className="ant-select-selected-icon"
                                    type="tick"
                                  />
                                }
                                multiple={false}
                                onDropdownVisibleChange={[Function]}
                                onMenuDeselect={[Function]}
                                onMenuSelect={[Function]}
                                onPopupFocus={[Function]}
                                options={Array []}
                                prefixCls="ant-select"
                                showAction={
                                  Array [
                                    "click",
                                  ]
                                }
                                showSearch={false}
                                transitionName="slide-up"
                                value={
                                  Array [
                                    "EQ",
                                  ]
                                }
                                visible={false}
                              >
                                <Trigger
                                  action={Array []}
                                  afterPopupVisibleChange={[Function]}
                                  ariaId="test-uuid"
                                  backfillValue=""
                                  blurDelay={0.15}
                                  builtinPlacements={
                                    Object {
                                      "bottomLeft": Object {
                                        "offset": Array [
                                          0,
                                          4,
                                        ],
                                        "overflow": Object {
                                          "adjustX": 0,
                                          "adjustY": 1,
                                        },
                                        "points": Array [
                                          "tl",
                                          "bl",
                                        ],
                                      },
                                      "topLeft": Object {
                                        "offset": Array [
                                          0,
                                          -4,
                                        ],
                                        "overflow": Object {
                                          "adjustX": 0,
                                          "adjustY": 1,
                                        },
                                        "points": Array [
                                          "bl",
                                          "tl",
                                        ],
                                      },
                                    }
                                  }
                                  combobox={false}
                                  defaultActiveFirstOption={true}
                                  defaultPopupVisible={false}
                                  destroyPopupOnHide={false}
                                  dropdownClassName="cap-select-v2-dropdown"
                                  dropdownMatchSelectWidth={true}
                                  dropdownMenuStyle={Object {}}
                                  dropdownRender={[Function]}
                                  dropdownStyle={Object {}}
                                  focusDelay={0}
                                  getDocument={[Function]}
                                  getPopupClassNameFromAlign={[Function]}
                                  getPopupContainer={[Function]}
                                  hideAction={
                                    Array [
                                      "click",
                                    ]
                                  }
                                  inputValue=""
                                  mask={false}
                                  maskClosable={true}
                                  menuItemSelectedIcon={
                                    <CapIcon
                                      className="ant-select-selected-icon"
                                      type="tick"
                                    />
                                  }
                                  mouseEnterDelay={0}
                                  mouseLeaveDelay={0.1}
                                  multiple={false}
                                  onDropdownVisibleChange={[Function]}
                                  onMenuDeselect={[Function]}
                                  onMenuSelect={[Function]}
                                  onPopupAlign={[Function]}
                                  onPopupVisibleChange={[Function]}
                                  options={Array []}
                                  popup={
                                    <DropdownMenu
                                      ariaId="test-uuid"
                                      backfillValue=""
                                      defaultActiveFirstOption={true}
                                      dropdownMenuStyle={Object {}}
                                      inputValue=""
                                      menuItemSelectedIcon={
                                        <CapIcon
                                          className="ant-select-selected-icon"
                                          type="tick"
                                        />
                                      }
                                      menuItems={Array []}
                                      multiple={false}
                                      onMenuDeselect={[Function]}
                                      onMenuSelect={[Function]}
                                      onPopupFocus={[Function]}
                                      prefixCls="ant-select-dropdown"
                                      value={
                                        Array [
                                          "EQ",
                                        ]
                                      }
                                      visible={false}
                                    />
                                  }
                                  popupAlign={Object {}}
                                  popupClassName="cap-select-v2-dropdown ant-select-dropdown--single"
                                  popupPlacement="bottomLeft"
                                  popupStyle={Object {}}
                                  popupTransitionName="slide-up"
                                  popupVisible={false}
                                  prefixCls="ant-select-dropdown"
                                  showAction={
                                    Array [
                                      "click",
                                    ]
                                  }
                                  showSearch={false}
                                  transitionName="slide-up"
                                  value={
                                    Array [
                                      "EQ",
                                    ]
                                  }
                                  visible={false}
                                >
                                  <div
                                    className="cap-select-v2 ant-select ant-select-enabled"
                                    key="trigger"
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseOut={[Function]}
                                    onMouseUp={[Function]}
                                    onTouchStart={[Function]}
                                    style={
                                      Object {
                                        "width": "100px",
                                      }
                                    }
                                  >
                                    <div
                                      aria-autocomplete="list"
                                      aria-controls="test-uuid"
                                      aria-expanded={false}
                                      aria-haspopup="true"
                                      className="ant-select-selection
            ant-select-selection--single"
                                      key="selection"
                                      onKeyDown={[Function]}
                                      role="combobox"
                                      tabIndex={0}
                                    >
                                      <div
                                        className="ant-select-selection__rendered"
                                      >
                                        <div
                                          className="ant-select-selection-selected-value"
                                          key="value"
                                          style={
                                            Object {
                                              "display": "block",
                                              "opacity": 1,
                                            }
                                          }
                                          title="equal to"
                                        >
                                          equal to
                                        </div>
                                      </div>
                                      <span
                                        className="ant-select-arrow"
                                        key="arrow"
                                        onClick={[Function]}
                                        style={
                                          Object {
                                            "WebkitUserSelect": "none",
                                            "userSelect": "none",
                                          }
                                        }
                                        unselectable="on"
                                      >
                                        <CapIcon
                                          className="ant-select-arrow-icon"
                                          type="chevron-down"
                                        >
                                          <Styled(Icon)
                                            className="cap-icon-v2 cap-icon-v2-chevron-down ant-select-arrow-icon"
                                            component={[Function]}
                                          >
                                            <StyledComponent
                                              className="cap-icon-v2 cap-icon-v2-chevron-down ant-select-arrow-icon"
                                              component={[Function]}
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-bxivhb",
                                                    "isStatic": false,
                                                    "lastClassName": "kZDkVS",
                                                    "rules": Array [
                                                      "
  font-size: ",
                                                      [Function],
                                                      ";
",
                                                    ],
                                                  },
                                                  "createFromIconfontCN": [Function],
                                                  "displayName": "Styled(Icon)",
                                                  "foldedComponentIds": Array [],
                                                  "getTwoToneColor": [Function],
                                                  "render": [Function],
                                                  "setTwoToneColor": [Function],
                                                  "styledComponentId": "sc-bxivhb",
                                                  "target": [Function],
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <Icon
                                                className="sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-chevron-down ant-select-arrow-icon"
                                                component={[Function]}
                                              >
                                                <LocaleReceiver
                                                  componentName="Icon"
                                                >
                                                  <i
                                                    className="anticon sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-chevron-down ant-select-arrow-icon"
                                                  >
                                                    <component
                                                      aria-hidden={true}
                                                      className=""
                                                      fill="currentColor"
                                                      focusable="false"
                                                      height="1em"
                                                      width="1em"
                                                    >
                                                      <SvgChevronDown>
                                                        <svg
                                                          fill="currentColor"
                                                          height="1em"
                                                          viewBox="0 0 24 24"
                                                          width="1em"
                                                        >
                                                          <path
                                                            d="M11.293 14.993L6.7 10.4A.99.99 0 0 1 8.1 9l3.9 3.9L15.9 9a.99.99 0 0 1 1.4 1.4l-4.593 4.593a1 1 0 0 1-1.414 0z"
                                                            id="chevron-down_svg__a"
                                                          />
                                                        </svg>
                                                      </SvgChevronDown>
                                                    </component>
                                                  </i>
                                                </LocaleReceiver>
                                              </Icon>
                                            </StyledComponent>
                                          </Styled(Icon)>
                                        </CapIcon>
                                      </span>
                                    </div>
                                  </div>
                                </Trigger>
                              </SelectTrigger>
                            </Select>
                          </Select>
                        </CapSelect>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </div>
              </StyledComponent>
            </styled.div>
          </_class>
          <_class
            className="cap-condition-num-input-1"
            labelPosition="top"
            onChange={[Function]}
            size="medium"
            style={
              Object {
                "width": "95px",
              }
            }
            type="number"
            value={null}
          >
            <styled.div
              className="component-with-label cap-condition-num-input-1"
              labelPosition="top"
            >
              <StyledComponent
                className="component-with-label cap-condition-num-input-1"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-ifAKCX",
                      "isStatic": false,
                      "lastClassName": "IhtIz",
                      "rules": Array [
                        "
  &.component-with-label {
    display: ",
                        [Function],
                        ";
    cursor: ",
                        [Function],
                        ";
    input,
    .ant-input-number,
    textarea {
      &::-webkit-input-placeholder {
        font-size: 14px;
      }
      &.ant-input:hover, &.ant-input-number:hover {
        border-color: ",
                        [Function],
                        ";
        box-shadow: none;
      }
      &.ant-input:focus, &.ant-input-number:focus {
        border-color: ",
                        [Function],
                        ";
        box-shadow: none;
      }
      &:not(.ant-calendar-range-picker-input) {
        width: ",
                        [Function],
                        ";
      }
      border-color: ",
                        [Function],
                        ";
    }
    .ant-input-affix-wrapper {
      width: ",
                        [Function],
                        ";

      & > input {
        width: 100%;
      }
    }
    .ant-input-number {
      border-width: 1px;
      border-style: solid;
      border-color: ",
                        [Function],
                        ";
    }
    .ant-input-affix-wrapper .ant-input-suffix {
      right: 8px;
    }
    .ant-input-affix-wrapper .ant-input-prefix {
      left: 8px;
    }
    .ant-select.cap-select-v2 {
      &.ant-select-enabled.ant-select-focused .ant-select-selection,
      &.ant-select-enabled .ant-select-selection,
      &.ant-select-enabled .ant-select-selection {
        border-color: ",
                        [Function],
                        ";
      }
    }
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-ifAKCX",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                labelPosition="top"
              >
                <div
                  className="sc-ifAKCX IhtIz component-with-label cap-condition-num-input-1"
                >
                  <styled.div
                    labelPosition="top"
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "lastClassName": "hNMQHj",
                            "rules": Array [
                              "  
  display: ",
                              [Function],
                              ";  
  align-items: ",
                              [Function],
                              ";  
  justify-content: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      labelPosition="top"
                    >
                      <div
                        className="sc-EHOje hNMQHj"
                      >
                        <CapInput
                          onChange={[Function]}
                          size="medium"
                          style={
                            Object {
                              "width": "95px",
                            }
                          }
                          type="number"
                          value={null}
                        >
                          <Input
                            onChange={[Function]}
                            size="medium"
                            style={
                              Object {
                                "width": "95px",
                              }
                            }
                            suffix={<span />}
                            type="number"
                            value={null}
                          >
                            <span
                              className="ant-input-affix-wrapper"
                              style={
                                Object {
                                  "width": "95px",
                                }
                              }
                            >
                              <input
                                className="ant-input"
                                onChange={[Function]}
                                onKeyDown={[Function]}
                                size="medium"
                                style={null}
                                type="number"
                                value=""
                              />
                              <span
                                className="ant-input-suffix"
                              >
                                <span />
                              </span>
                            </span>
                          </Input>
                        </CapInput>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </div>
              </StyledComponent>
            </styled.div>
          </_class>
        </div>
      </StyledComponent>
    </styled.div>
  </ConditionNumber>
</Wrapper>
`;
