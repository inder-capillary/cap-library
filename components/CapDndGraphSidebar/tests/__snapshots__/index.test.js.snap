// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CapJourneySidebar test should render correct component 1`] = `
<DndProvider
  backend={[Function]}
>
  <CapJourneySidebar
    drag={true}
    nodes={
      Object {
        "actions": Object {
          "children": Array [
            Object {
              "label": "User attribute c...",
              "type": "userAttributeChange",
            },
            Object {
              "label": "API call",
              "type": "api",
            },
          ],
          "color": "#2466ea",
          "description": "actions nodes",
          "title": "Actions",
        },
        "engagements": Object {
          "children": Array [
            Object {
              "label": "SMS",
              "type": "sms",
            },
            Object {
              "label": "Email",
              "type": "messageWithTransform",
            },
            Object {
              "label": "M-push",
              "type": "mpush",
            },
            Object {
              "label": "Line",
              "type": "line",
            },
            Object {
              "label": "WeChat",
              "type": "wechatOutline",
            },
            Object {
              "label": "Top X channel",
              "type": "topXChannel",
            },
            Object {
              "label": "Channel priority",
              "type": "channelPriority",
            },
            Object {
              "label": "A/B test",
              "type": "lab",
            },
          ],
          "color": "#fec52e",
          "description": "engagement nodes",
          "title": "Enagagements",
        },
        "flowControl": Object {
          "children": Array [
            Object {
              "label": "Wait",
              "type": "alarm",
            },
            Object {
              "label": "Wait till event",
              "type": "waitEvent",
            },
            Object {
              "label": "Join",
              "type": "join",
            },
            Object {
              "label": "Engagement split",
              "type": "engagementSplit",
            },
            Object {
              "label": "Decision split",
              "type": "split",
            },
          ],
          "description": "flow control nodes",
          "title": "Flow Control",
        },
      }
    }
  >
    <div
      className="journey-sidebar-container"
    >
      <div
        className="title-row"
      >
        <styled.div
          type="h3"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "CapHeadingSpan": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": false,
                    "rules": Array [
                      "
font-size: ",
                      [Function],
                      ";
font-weight: ",
                      [Function],
                      ";
color: ",
                      [Function],
                      ";
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
                "_foldedDefaultProps": Object {
                  "type": "h5",
                },
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bdVaJa",
                  "isStatic": false,
                  "lastClassName": "kZeOKr",
                  "rules": Array [
                    "
    font-size: ",
                    [Function],
                    ";
    font-weight: ",
                    [Function],
                    ";
    color: ",
                    [Function],
                    ";
    line-height: ",
                    [Function],
                    ";
    ",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "propTypes": Object {
                  "children": [Function],
                  "type": [Function],
                },
                "render": [Function],
                "styledComponentId": "sc-bdVaJa",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            type="h3"
          >
            <div
              className="sc-bdVaJa eWyphC"
              type="h3"
            />
          </StyledComponent>
        </styled.div>
        <CapTooltip>
          <Tooltip
            arrowPointAtCenter={false}
            autoAdjustOverflow={true}
            mouseEnterDelay={0.1}
            mouseLeaveDelay={0.1}
            overlayClassName="cap-tooltip-overlay-v2"
            placement="top"
            transitionName="zoom-big-fast"
          >
            <Tooltip
              align={Object {}}
              arrowContent={null}
              arrowPointAtCenter={false}
              autoAdjustOverflow={true}
              builtinPlacements={
                Object {
                  "bottom": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      0,
                      4,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "tc",
                      "bc",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "bottomLeft": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      0,
                      4,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "tl",
                      "bl",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "bottomRight": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      0,
                      4,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "tr",
                      "br",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "left": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      -4,
                      0,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "cr",
                      "cl",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "leftBottom": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      -4,
                      0,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "br",
                      "bl",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "leftTop": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      -4,
                      0,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "tr",
                      "tl",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "right": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      4,
                      0,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "cl",
                      "cr",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "rightBottom": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      4,
                      0,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "bl",
                      "br",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "rightTop": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      4,
                      0,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "tl",
                      "tr",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "top": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      0,
                      -4,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "bc",
                      "tc",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "topLeft": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      0,
                      -4,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "bl",
                      "tl",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "topRight": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      0,
                      -4,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "br",
                      "tr",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                }
              }
              destroyTooltipOnHide={false}
              mouseEnterDelay={0.1}
              mouseLeaveDelay={0.1}
              onPopupAlign={[Function]}
              onVisibleChange={[Function]}
              overlay=""
              overlayClassName="cap-tooltip-overlay-v2"
              placement="top"
              prefixCls="ant-tooltip"
              transitionName="zoom-big-fast"
              trigger={
                Array [
                  "hover",
                ]
              }
              visible={false}
            >
              <Trigger
                action={
                  Array [
                    "hover",
                  ]
                }
                afterPopupVisibleChange={[Function]}
                arrowContent={null}
                arrowPointAtCenter={false}
                autoAdjustOverflow={true}
                blurDelay={0.15}
                builtinPlacements={
                  Object {
                    "bottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tc",
                        "bc",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "bottomLeft": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tl",
                        "bl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "bottomRight": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tr",
                        "br",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "left": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "cr",
                        "cl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "leftBottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "br",
                        "bl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "leftTop": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tr",
                        "tl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "right": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "cl",
                        "cr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "rightBottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bl",
                        "br",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "rightTop": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tl",
                        "tr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "top": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bc",
                        "tc",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "topLeft": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bl",
                        "tl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "topRight": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "br",
                        "tr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                  }
                }
                defaultPopupVisible={false}
                destroyPopupOnHide={false}
                focusDelay={0}
                getDocument={[Function]}
                getPopupClassNameFromAlign={[Function]}
                hideAction={Array []}
                mask={false}
                maskClosable={true}
                mouseEnterDelay={0.1}
                mouseLeaveDelay={0.1}
                onPopupAlign={[Function]}
                onPopupVisibleChange={[Function]}
                overlay=""
                popup={[Function]}
                popupAlign={Object {}}
                popupClassName="cap-tooltip-overlay-v2"
                popupPlacement="top"
                popupStyle={Object {}}
                popupTransitionName="zoom-big-fast"
                popupVisible={false}
                prefixCls="ant-tooltip"
                showAction={Array []}
                visible={false}
              >
                <CapIcon
                  className="info-icon"
                  key="trigger"
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                  size="xs"
                  type="info"
                >
                  <Styled(Icon)
                    className="cap-icon-v2 cap-icon-v2-info info-icon"
                    component={[Function]}
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                    size="xs"
                  >
                    <StyledComponent
                      className="cap-icon-v2 cap-icon-v2-info info-icon"
                      component={[Function]}
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bxivhb",
                            "isStatic": false,
                            "lastClassName": "kZDkVS",
                            "rules": Array [
                              "
  font-size: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "createFromIconfontCN": [Function],
                          "displayName": "Styled(Icon)",
                          "foldedComponentIds": Array [],
                          "getTwoToneColor": [Function],
                          "render": [Function],
                          "setTwoToneColor": [Function],
                          "styledComponentId": "sc-bxivhb",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      size="xs"
                    >
                      <Icon
                        className="sc-bxivhb fYYxJD cap-icon-v2 cap-icon-v2-info info-icon"
                        component={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        size="xs"
                      >
                        <LocaleReceiver
                          componentName="Icon"
                        >
                          <i
                            className="anticon sc-bxivhb fYYxJD cap-icon-v2 cap-icon-v2-info info-icon"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            size="xs"
                          >
                            <component
                              aria-hidden={true}
                              className=""
                              fill="currentColor"
                              focusable="false"
                              height="1em"
                              width="1em"
                            >
                              <SvgInfo>
                                <svg
                                  fill="currentColor"
                                  height="1em"
                                  viewBox="0 0 24 24"
                                  width="1em"
                                >
                                  <path
                                    d="M12 11a1 1 0 0 1 1 1v4a1 1 0 0 1-2 0v-4a1 1 0 0 1 1-1zm0-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 4.5a1.5 1.5 0 1 0 .001 3.001A1.5 1.5 0 0 0 12 6.5zM12 20c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"
                                    id="info_svg__a"
                                  />
                                </svg>
                              </SvgInfo>
                            </component>
                          </i>
                        </LocaleReceiver>
                      </Icon>
                    </StyledComponent>
                  </Styled(Icon)>
                </CapIcon>
              </Trigger>
            </Tooltip>
          </Tooltip>
        </CapTooltip>
      </div>
      <styled.div
        type="label3"
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "CapLabelInline": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-EHOje",
                  "isStatic": false,
                  "rules": Array [
                    "
font-size: ",
                    [Function],
                    ";
font-weight: ",
                    [Function],
                    ";
color: ",
                    [Function],
                    ";
line-height: ",
                    [Function],
                    ";
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-EHOje",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
              "_foldedDefaultProps": Object {
                "type": "label1",
              },
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-ifAKCX",
                "isStatic": false,
                "lastClassName": "jAkirh",
                "rules": Array [
                  "
    font-size: ",
                  [Function],
                  ";
    font-weight: ",
                  [Function],
                  ";
    color: ",
                  [Function],
                  ";
    line-height: ",
                  [Function],
                  ";
    ",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "propTypes": Object {
                "children": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "sc-ifAKCX",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          type="label3"
        >
          <div
            className="sc-ifAKCX kDVSyQ"
            type="label3"
          />
        </StyledComponent>
      </styled.div>
      <div
        className="category-container"
        key="Enagagements"
      >
        <div
          className="title-row"
        >
          <styled.div
            type="h4"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "CapHeadingSpan": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bwzfXH",
                      "isStatic": false,
                      "rules": Array [
                        "
font-size: ",
                        [Function],
                        ";
font-weight: ",
                        [Function],
                        ";
color: ",
                        [Function],
                        ";
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bwzfXH",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "_foldedDefaultProps": Object {
                    "type": "h5",
                  },
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "kZeOKr",
                    "rules": Array [
                      "
    font-size: ",
                      [Function],
                      ";
    font-weight: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
    line-height: ",
                      [Function],
                      ";
    ",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "propTypes": Object {
                    "children": [Function],
                    "type": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              type="h4"
            >
              <div
                className="sc-bdVaJa kZeOKr"
                type="h4"
              >
                Enagagements
              </div>
            </StyledComponent>
          </styled.div>
          <CapTooltip
            title="engagement nodes"
          >
            <Tooltip
              arrowPointAtCenter={false}
              autoAdjustOverflow={true}
              mouseEnterDelay={0.1}
              mouseLeaveDelay={0.1}
              overlayClassName="cap-tooltip-overlay-v2"
              placement="top"
              title="engagement nodes"
              transitionName="zoom-big-fast"
            >
              <Tooltip
                align={Object {}}
                arrowContent={null}
                arrowPointAtCenter={false}
                autoAdjustOverflow={true}
                builtinPlacements={
                  Object {
                    "bottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tc",
                        "bc",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "bottomLeft": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tl",
                        "bl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "bottomRight": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tr",
                        "br",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "left": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "cr",
                        "cl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "leftBottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "br",
                        "bl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "leftTop": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tr",
                        "tl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "right": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "cl",
                        "cr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "rightBottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bl",
                        "br",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "rightTop": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tl",
                        "tr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "top": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bc",
                        "tc",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "topLeft": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bl",
                        "tl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "topRight": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "br",
                        "tr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                  }
                }
                destroyTooltipOnHide={false}
                mouseEnterDelay={0.1}
                mouseLeaveDelay={0.1}
                onPopupAlign={[Function]}
                onVisibleChange={[Function]}
                overlay="engagement nodes"
                overlayClassName="cap-tooltip-overlay-v2"
                placement="top"
                prefixCls="ant-tooltip"
                title="engagement nodes"
                transitionName="zoom-big-fast"
                trigger={
                  Array [
                    "hover",
                  ]
                }
                visible={false}
              >
                <Trigger
                  action={
                    Array [
                      "hover",
                    ]
                  }
                  afterPopupVisibleChange={[Function]}
                  arrowContent={null}
                  arrowPointAtCenter={false}
                  autoAdjustOverflow={true}
                  blurDelay={0.15}
                  builtinPlacements={
                    Object {
                      "bottom": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tc",
                          "bc",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "bottomLeft": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tl",
                          "bl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "bottomRight": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tr",
                          "br",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "left": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          -4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "cr",
                          "cl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "leftBottom": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          -4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "br",
                          "bl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "leftTop": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          -4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tr",
                          "tl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "right": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "cl",
                          "cr",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "rightBottom": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bl",
                          "br",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "rightTop": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tl",
                          "tr",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "top": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bc",
                          "tc",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "topLeft": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bl",
                          "tl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "topRight": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "br",
                          "tr",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                    }
                  }
                  defaultPopupVisible={false}
                  destroyPopupOnHide={false}
                  focusDelay={0}
                  getDocument={[Function]}
                  getPopupClassNameFromAlign={[Function]}
                  hideAction={Array []}
                  mask={false}
                  maskClosable={true}
                  mouseEnterDelay={0.1}
                  mouseLeaveDelay={0.1}
                  onPopupAlign={[Function]}
                  onPopupVisibleChange={[Function]}
                  overlay="engagement nodes"
                  popup={[Function]}
                  popupAlign={Object {}}
                  popupClassName="cap-tooltip-overlay-v2"
                  popupPlacement="top"
                  popupStyle={Object {}}
                  popupTransitionName="zoom-big-fast"
                  popupVisible={false}
                  prefixCls="ant-tooltip"
                  showAction={Array []}
                  title="engagement nodes"
                  visible={false}
                >
                  <CapIcon
                    className="info-icon"
                    key="trigger"
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                    size="xs"
                    type="info"
                  >
                    <Styled(Icon)
                      className="cap-icon-v2 cap-icon-v2-info info-icon"
                      component={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      size="xs"
                    >
                      <StyledComponent
                        className="cap-icon-v2 cap-icon-v2-info info-icon"
                        component={[Function]}
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bxivhb",
                              "isStatic": false,
                              "lastClassName": "kZDkVS",
                              "rules": Array [
                                "
  font-size: ",
                                [Function],
                                ";
",
                              ],
                            },
                            "createFromIconfontCN": [Function],
                            "displayName": "Styled(Icon)",
                            "foldedComponentIds": Array [],
                            "getTwoToneColor": [Function],
                            "render": [Function],
                            "setTwoToneColor": [Function],
                            "styledComponentId": "sc-bxivhb",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        size="xs"
                      >
                        <Icon
                          className="sc-bxivhb fYYxJD cap-icon-v2 cap-icon-v2-info info-icon"
                          component={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          size="xs"
                        >
                          <LocaleReceiver
                            componentName="Icon"
                          >
                            <i
                              className="anticon sc-bxivhb fYYxJD cap-icon-v2 cap-icon-v2-info info-icon"
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              size="xs"
                            >
                              <component
                                aria-hidden={true}
                                className=""
                                fill="currentColor"
                                focusable="false"
                                height="1em"
                                width="1em"
                              >
                                <SvgInfo>
                                  <svg
                                    fill="currentColor"
                                    height="1em"
                                    viewBox="0 0 24 24"
                                    width="1em"
                                  >
                                    <path
                                      d="M12 11a1 1 0 0 1 1 1v4a1 1 0 0 1-2 0v-4a1 1 0 0 1 1-1zm0-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 4.5a1.5 1.5 0 1 0 .001 3.001A1.5 1.5 0 0 0 12 6.5zM12 20c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"
                                      id="info_svg__a"
                                    />
                                  </svg>
                                </SvgInfo>
                              </component>
                            </i>
                          </LocaleReceiver>
                        </Icon>
                      </StyledComponent>
                    </Styled(Icon)>
                  </CapIcon>
                </Trigger>
              </Tooltip>
            </Tooltip>
          </CapTooltip>
        </div>
        <div
          className="icons-container"
        >
          <div
            className="node-container"
            key="sms"
          >
            <div
              className="node-container-inner"
            >
              <CapAdvancedIcon
                backgroundColor="#fec52e"
                dragRef={[Function]}
                label1={
                  <ForwardRef(styled.div)
                    className="node-label"
                    type="label5"
                  >
                    SMS
                  </ForwardRef(styled.div)>
                }
                svgProps={
                  Object {
                    "height": "24px",
                    "viewBox": "0 0 24 24",
                    "width": "24px",
                  }
                }
                type="sms"
              >
                <div
                  className="advanced-icon-container"
                >
                  <div>
                    <CapIcon
                      backgroundProps={
                        Object {
                          "style": Object {
                            "backgroundColor": "#fec52e",
                            "lineHeight": 1,
                            "padding": "9px",
                          },
                        }
                      }
                      style={
                        Object {
                          "color": "#ffffff",
                        }
                      }
                      svgProps={
                        Object {
                          "height": "24px",
                          "viewBox": "0 0 24 24",
                          "width": "24px",
                        }
                      }
                      type="sms"
                      withBackground={true}
                    >
                      <styled.div
                        className="cap-icon-background"
                        style={
                          Object {
                            "backgroundColor": "#fec52e",
                            "lineHeight": 1,
                            "padding": "9px",
                          }
                        }
                      >
                        <StyledComponent
                          className="cap-icon-background"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "jOYlkw",
                                "rules": Array [
                                  "
  background-color: ",
                                  [Function],
                                  ";
  border-radius: 18px;
  padding: ",
                                  [Function],
                                  ";
  display: inline-block;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          style={
                            Object {
                              "backgroundColor": "#fec52e",
                              "lineHeight": 1,
                              "padding": "9px",
                            }
                          }
                        >
                          <div
                            className="sc-htpNat jOYlkw cap-icon-background"
                            style={
                              Object {
                                "backgroundColor": "#fec52e",
                                "lineHeight": 1,
                                "padding": "9px",
                              }
                            }
                          >
                            <Styled(Icon)
                              className="cap-icon-v2 cap-icon-v2-sms"
                              component={[Function]}
                              style={
                                Object {
                                  "color": "#ffffff",
                                }
                              }
                            >
                              <StyledComponent
                                className="cap-icon-v2 cap-icon-v2-sms"
                                component={[Function]}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "kZDkVS",
                                      "rules": Array [
                                        "
  font-size: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "createFromIconfontCN": [Function],
                                    "displayName": "Styled(Icon)",
                                    "foldedComponentIds": Array [],
                                    "getTwoToneColor": [Function],
                                    "render": [Function],
                                    "setTwoToneColor": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                style={
                                  Object {
                                    "color": "#ffffff",
                                  }
                                }
                              >
                                <Icon
                                  className="sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-sms"
                                  component={[Function]}
                                  style={
                                    Object {
                                      "color": "#ffffff",
                                    }
                                  }
                                >
                                  <LocaleReceiver
                                    componentName="Icon"
                                  >
                                    <i
                                      className="anticon sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-sms"
                                      style={
                                        Object {
                                          "color": "#ffffff",
                                        }
                                      }
                                    >
                                      <component
                                        aria-hidden={true}
                                        className=""
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        width="1em"
                                      >
                                        <SvgSms
                                          height="24px"
                                          viewBox="0 0 24 24"
                                          width="24px"
                                        >
                                          <svg
                                            fill="currentColor"
                                            height="24px"
                                            viewBox="0 0 24 24"
                                            width="24px"
                                          >
                                            <path
                                              d="M4 4h16v12H5.17L4 17.17V4zm0-2c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2H4zm2 10h12v2H6v-2zm0-3h12v2H6V9zm0-3h12v2H6V6z"
                                              id="sms_svg__a"
                                            />
                                          </svg>
                                        </SvgSms>
                                      </component>
                                    </i>
                                  </LocaleReceiver>
                                </Icon>
                              </StyledComponent>
                            </Styled(Icon)>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </CapIcon>
                  </div>
                </div>
                <styled.div
                  className="node-label"
                  type="label5"
                >
                  <StyledComponent
                    className="node-label"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "CapLabelInline": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "rules": Array [
                              "
font-size: ",
                              [Function],
                              ";
font-weight: ",
                              [Function],
                              ";
color: ",
                              [Function],
                              ";
line-height: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                        "_foldedDefaultProps": Object {
                          "type": "label1",
                        },
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "jAkirh",
                          "rules": Array [
                            "
    font-size: ",
                            [Function],
                            ";
    font-weight: ",
                            [Function],
                            ";
    color: ",
                            [Function],
                            ";
    line-height: ",
                            [Function],
                            ";
    ",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "children": [Function],
                          "type": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="label5"
                  >
                    <div
                      className="sc-ifAKCX jAkirh node-label"
                      type="label5"
                    >
                      SMS
                    </div>
                  </StyledComponent>
                </styled.div>
              </CapAdvancedIcon>
            </div>
          </div>
          <div
            className="node-container"
            key="messageWithTransform"
          >
            <div
              className="node-container-inner"
            >
              <CapAdvancedIcon
                backgroundColor="#fec52e"
                dragRef={[Function]}
                label1={
                  <ForwardRef(styled.div)
                    className="node-label"
                    type="label5"
                  >
                    Email
                  </ForwardRef(styled.div)>
                }
                svgProps={
                  Object {
                    "height": "24px",
                    "viewBox": "0 0 24 24",
                    "width": "24px",
                  }
                }
                type="messageWithTransform"
              >
                <div
                  className="advanced-icon-container"
                >
                  <div>
                    <CapIcon
                      backgroundProps={
                        Object {
                          "style": Object {
                            "backgroundColor": "#fec52e",
                            "lineHeight": 1,
                            "padding": "9px",
                          },
                        }
                      }
                      style={
                        Object {
                          "color": "#ffffff",
                        }
                      }
                      svgProps={
                        Object {
                          "height": "24px",
                          "viewBox": "0 0 24 24",
                          "width": "24px",
                        }
                      }
                      type="messageWithTransform"
                      withBackground={true}
                    >
                      <styled.div
                        className="cap-icon-background"
                        style={
                          Object {
                            "backgroundColor": "#fec52e",
                            "lineHeight": 1,
                            "padding": "9px",
                          }
                        }
                      >
                        <StyledComponent
                          className="cap-icon-background"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "jOYlkw",
                                "rules": Array [
                                  "
  background-color: ",
                                  [Function],
                                  ";
  border-radius: 18px;
  padding: ",
                                  [Function],
                                  ";
  display: inline-block;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          style={
                            Object {
                              "backgroundColor": "#fec52e",
                              "lineHeight": 1,
                              "padding": "9px",
                            }
                          }
                        >
                          <div
                            className="sc-htpNat jOYlkw cap-icon-background"
                            style={
                              Object {
                                "backgroundColor": "#fec52e",
                                "lineHeight": 1,
                                "padding": "9px",
                              }
                            }
                          >
                            <Styled(Icon)
                              className="cap-icon-v2 cap-icon-v2-messageWithTransform"
                              component={[Function]}
                              style={
                                Object {
                                  "color": "#ffffff",
                                }
                              }
                            >
                              <StyledComponent
                                className="cap-icon-v2 cap-icon-v2-messageWithTransform"
                                component={[Function]}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "kZDkVS",
                                      "rules": Array [
                                        "
  font-size: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "createFromIconfontCN": [Function],
                                    "displayName": "Styled(Icon)",
                                    "foldedComponentIds": Array [],
                                    "getTwoToneColor": [Function],
                                    "render": [Function],
                                    "setTwoToneColor": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                style={
                                  Object {
                                    "color": "#ffffff",
                                  }
                                }
                              >
                                <Icon
                                  className="sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-messageWithTransform"
                                  component={[Function]}
                                  style={
                                    Object {
                                      "color": "#ffffff",
                                    }
                                  }
                                >
                                  <LocaleReceiver
                                    componentName="Icon"
                                  >
                                    <i
                                      className="anticon sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-messageWithTransform"
                                      style={
                                        Object {
                                          "color": "#ffffff",
                                        }
                                      }
                                    >
                                      <component
                                        aria-hidden={true}
                                        className=""
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        width="1em"
                                      >
                                        <SvgMessageWithTransform
                                          height="24px"
                                          viewBox="0 0 24 24"
                                          width="24px"
                                        >
                                          <svg
                                            fill="currentColor"
                                            height="24px"
                                            viewBox="0 0 24 24"
                                            width="24px"
                                            xmlns="http://www.w3.org/2000/svg"
                                            xmlnsXlink="http://www.w3.org/1999/xlink"
                                          >
                                            <defs>
                                              <path
                                                d="M3 2a1 1 0 00-1 1v10a1 1 0 001 1h14a1 1 0 001-1V3a1 1 0 00-1-1H3zm0-2h14a3 3 0 013 3v10a3 3 0 01-3 3H3a3 3 0 01-3-3V3a3 3 0 013-3zm9.907 4h2.828l-6 6-6-6h2.828l3.172 3.172L12.907 4z"
                                                id="message1_svg__a"
                                              />
                                            </defs>
                                            <g
                                              fill="none"
                                              fillRule="evenodd"
                                              transform="translate(2 4)"
                                            >
                                              <mask
                                                fill="#fff"
                                                id="message1_svg__b"
                                              >
                                                <use
                                                  xlinkHref="#message1_svg__a"
                                                />
                                              </mask>
                                              <use
                                                fill="#FFF"
                                                xlinkHref="#message1_svg__a"
                                              />
                                              <g
                                                fill="#FFF"
                                                mask="url(#message1_svg__b)"
                                              >
                                                <path
                                                  d="M-2-4h24v24H-2z"
                                                />
                                              </g>
                                            </g>
                                          </svg>
                                        </SvgMessageWithTransform>
                                      </component>
                                    </i>
                                  </LocaleReceiver>
                                </Icon>
                              </StyledComponent>
                            </Styled(Icon)>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </CapIcon>
                  </div>
                </div>
                <styled.div
                  className="node-label"
                  type="label5"
                >
                  <StyledComponent
                    className="node-label"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "CapLabelInline": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "rules": Array [
                              "
font-size: ",
                              [Function],
                              ";
font-weight: ",
                              [Function],
                              ";
color: ",
                              [Function],
                              ";
line-height: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                        "_foldedDefaultProps": Object {
                          "type": "label1",
                        },
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "jAkirh",
                          "rules": Array [
                            "
    font-size: ",
                            [Function],
                            ";
    font-weight: ",
                            [Function],
                            ";
    color: ",
                            [Function],
                            ";
    line-height: ",
                            [Function],
                            ";
    ",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "children": [Function],
                          "type": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="label5"
                  >
                    <div
                      className="sc-ifAKCX jAkirh node-label"
                      type="label5"
                    >
                      Email
                    </div>
                  </StyledComponent>
                </styled.div>
              </CapAdvancedIcon>
            </div>
          </div>
          <div
            className="node-container"
            key="mpush"
          >
            <div
              className="node-container-inner"
            >
              <CapAdvancedIcon
                backgroundColor="#fec52e"
                dragRef={[Function]}
                label1={
                  <ForwardRef(styled.div)
                    className="node-label"
                    type="label5"
                  >
                    M-push
                  </ForwardRef(styled.div)>
                }
                svgProps={
                  Object {
                    "height": "24px",
                    "viewBox": "0 0 24 24",
                    "width": "24px",
                  }
                }
                type="mpush"
              >
                <div
                  className="advanced-icon-container"
                >
                  <div>
                    <CapIcon
                      backgroundProps={
                        Object {
                          "style": Object {
                            "backgroundColor": "#fec52e",
                            "lineHeight": 1,
                            "padding": "9px",
                          },
                        }
                      }
                      style={
                        Object {
                          "color": "#ffffff",
                        }
                      }
                      svgProps={
                        Object {
                          "height": "24px",
                          "viewBox": "0 0 24 24",
                          "width": "24px",
                        }
                      }
                      type="mpush"
                      withBackground={true}
                    >
                      <styled.div
                        className="cap-icon-background"
                        style={
                          Object {
                            "backgroundColor": "#fec52e",
                            "lineHeight": 1,
                            "padding": "9px",
                          }
                        }
                      >
                        <StyledComponent
                          className="cap-icon-background"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "jOYlkw",
                                "rules": Array [
                                  "
  background-color: ",
                                  [Function],
                                  ";
  border-radius: 18px;
  padding: ",
                                  [Function],
                                  ";
  display: inline-block;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          style={
                            Object {
                              "backgroundColor": "#fec52e",
                              "lineHeight": 1,
                              "padding": "9px",
                            }
                          }
                        >
                          <div
                            className="sc-htpNat jOYlkw cap-icon-background"
                            style={
                              Object {
                                "backgroundColor": "#fec52e",
                                "lineHeight": 1,
                                "padding": "9px",
                              }
                            }
                          >
                            <Styled(Icon)
                              className="cap-icon-v2 cap-icon-v2-mpush"
                              component={[Function]}
                              style={
                                Object {
                                  "color": "#ffffff",
                                }
                              }
                            >
                              <StyledComponent
                                className="cap-icon-v2 cap-icon-v2-mpush"
                                component={[Function]}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "kZDkVS",
                                      "rules": Array [
                                        "
  font-size: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "createFromIconfontCN": [Function],
                                    "displayName": "Styled(Icon)",
                                    "foldedComponentIds": Array [],
                                    "getTwoToneColor": [Function],
                                    "render": [Function],
                                    "setTwoToneColor": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                style={
                                  Object {
                                    "color": "#ffffff",
                                  }
                                }
                              >
                                <Icon
                                  className="sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-mpush"
                                  component={[Function]}
                                  style={
                                    Object {
                                      "color": "#ffffff",
                                    }
                                  }
                                >
                                  <LocaleReceiver
                                    componentName="Icon"
                                  >
                                    <i
                                      className="anticon sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-mpush"
                                      style={
                                        Object {
                                          "color": "#ffffff",
                                        }
                                      }
                                    >
                                      <component
                                        aria-hidden={true}
                                        className=""
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        width="1em"
                                      >
                                        <SvgMpush
                                          height="24px"
                                          viewBox="0 0 24 24"
                                          width="24px"
                                        >
                                          <svg
                                            fill="currentColor"
                                            height="24px"
                                            viewBox="0 0 24 24"
                                            width="24px"
                                          >
                                            <path
                                              d="M16.008 19l-.002-3H18v3.008c0 1.1-.891 1.992-1.992 1.992H7.992C6.892 21 6 20.108 6 19.008V4.992C6 3.892 6.892 3 7.992 3h8.016C17.108 3 18 3.892 18 4.992V8h-1.998L16 5H7.992L8 19.008 16.008 19zM14 13.667v-4.2c0-.257.21-.467.467-.467h6.066c.257 0 .467.21.467.467V16l-1.867-1.867h-4.666a.468.468 0 0 1-.467-.466z"
                                              id="mpush_svg__a"
                                            />
                                          </svg>
                                        </SvgMpush>
                                      </component>
                                    </i>
                                  </LocaleReceiver>
                                </Icon>
                              </StyledComponent>
                            </Styled(Icon)>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </CapIcon>
                  </div>
                </div>
                <styled.div
                  className="node-label"
                  type="label5"
                >
                  <StyledComponent
                    className="node-label"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "CapLabelInline": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "rules": Array [
                              "
font-size: ",
                              [Function],
                              ";
font-weight: ",
                              [Function],
                              ";
color: ",
                              [Function],
                              ";
line-height: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                        "_foldedDefaultProps": Object {
                          "type": "label1",
                        },
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "jAkirh",
                          "rules": Array [
                            "
    font-size: ",
                            [Function],
                            ";
    font-weight: ",
                            [Function],
                            ";
    color: ",
                            [Function],
                            ";
    line-height: ",
                            [Function],
                            ";
    ",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "children": [Function],
                          "type": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="label5"
                  >
                    <div
                      className="sc-ifAKCX jAkirh node-label"
                      type="label5"
                    >
                      M-push
                    </div>
                  </StyledComponent>
                </styled.div>
              </CapAdvancedIcon>
            </div>
          </div>
          <div
            className="node-container"
            key="line"
          >
            <div
              className="node-container-inner"
            >
              <CapAdvancedIcon
                backgroundColor="#fec52e"
                dragRef={[Function]}
                label1={
                  <ForwardRef(styled.div)
                    className="node-label"
                    type="label5"
                  >
                    Line
                  </ForwardRef(styled.div)>
                }
                svgProps={
                  Object {
                    "height": "24px",
                    "viewBox": "0 0 24 24",
                    "width": "24px",
                  }
                }
                type="line"
              >
                <div
                  className="advanced-icon-container"
                >
                  <div>
                    <CapIcon
                      backgroundProps={
                        Object {
                          "style": Object {
                            "backgroundColor": "#fec52e",
                            "lineHeight": 1,
                            "padding": "9px",
                          },
                        }
                      }
                      style={
                        Object {
                          "color": "#ffffff",
                        }
                      }
                      svgProps={
                        Object {
                          "height": "24px",
                          "viewBox": "0 0 24 24",
                          "width": "24px",
                        }
                      }
                      type="line"
                      withBackground={true}
                    >
                      <styled.div
                        className="cap-icon-background"
                        style={
                          Object {
                            "backgroundColor": "#fec52e",
                            "lineHeight": 1,
                            "padding": "9px",
                          }
                        }
                      >
                        <StyledComponent
                          className="cap-icon-background"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "jOYlkw",
                                "rules": Array [
                                  "
  background-color: ",
                                  [Function],
                                  ";
  border-radius: 18px;
  padding: ",
                                  [Function],
                                  ";
  display: inline-block;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          style={
                            Object {
                              "backgroundColor": "#fec52e",
                              "lineHeight": 1,
                              "padding": "9px",
                            }
                          }
                        >
                          <div
                            className="sc-htpNat jOYlkw cap-icon-background"
                            style={
                              Object {
                                "backgroundColor": "#fec52e",
                                "lineHeight": 1,
                                "padding": "9px",
                              }
                            }
                          >
                            <Styled(Icon)
                              className="cap-icon-v2 cap-icon-v2-line"
                              component={[Function]}
                              style={
                                Object {
                                  "color": "#ffffff",
                                }
                              }
                            >
                              <StyledComponent
                                className="cap-icon-v2 cap-icon-v2-line"
                                component={[Function]}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "kZDkVS",
                                      "rules": Array [
                                        "
  font-size: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "createFromIconfontCN": [Function],
                                    "displayName": "Styled(Icon)",
                                    "foldedComponentIds": Array [],
                                    "getTwoToneColor": [Function],
                                    "render": [Function],
                                    "setTwoToneColor": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                style={
                                  Object {
                                    "color": "#ffffff",
                                  }
                                }
                              >
                                <Icon
                                  className="sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-line"
                                  component={[Function]}
                                  style={
                                    Object {
                                      "color": "#ffffff",
                                    }
                                  }
                                >
                                  <LocaleReceiver
                                    componentName="Icon"
                                  >
                                    <i
                                      className="anticon sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-line"
                                      style={
                                        Object {
                                          "color": "#ffffff",
                                        }
                                      }
                                    >
                                      <component
                                        aria-hidden={true}
                                        className=""
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        width="1em"
                                      >
                                        <SvgLine
                                          height="24px"
                                          viewBox="0 0 24 24"
                                          width="24px"
                                        >
                                          <svg
                                            fill="currentColor"
                                            height="24px"
                                            viewBox="0 0 24 24"
                                            width="24px"
                                          >
                                            <path
                                              d="M20.327 14.87c1.229-1.53 1.823-3.488 1.64-5.39l-.025-.05-.045-.47c-.235-1.333-.89-2.613-1.897-3.702-1.03-1.115-2.37-1.995-3.88-2.548a11.96 11.96 0 00-4.131-.723c-1.931 0-3.802.451-5.412 1.306C3.553 4.9 1.765 7.816 2.025 10.725c.134 1.513.73 2.957 1.72 4.174.95 1.164 2.239 2.106 3.727 2.722.917.38 1.868.568 2.874.767l.124.024c.184.037.74.147 1.037.61.124.19.25.524.133 1.01l-.044.182c-.096.39-.18.732-.123 1.051.015.09.039.135.047.146.328-.019.906-.358 1.217-.54a36.46 36.46 0 002.828-1.874c1.609-1.16 3.434-2.477 4.762-4.128zm3.615-5.733c.28 2.465-.47 5.011-2.056 6.985-1.498 1.862-3.44 3.263-5.152 4.498-.78.561-1.813 1.287-2.918 1.936-.607.356-1.424.836-2.29.836-1.041-.002-1.835-.7-2.023-1.782a3.65 3.65 0 01.032-1.345c-.953-.19-1.87-.399-2.83-.796-1.791-.743-3.351-1.885-4.51-3.306C.952 14.634.203 12.815.034 10.903c-.331-3.712 1.87-7.392 5.606-9.377C8.942-.227 13.213-.486 16.809.832c1.805.661 3.417 1.722 4.66 3.068 1.043 1.13 1.789 2.432 2.189 3.812l.099-.009.185 1.434zM5.257 6.877v4.634h2.387v1.054H3.886V6.878h1.371zm3.059 5.688V6.878h1.367v5.687H8.316zm5.703-2.148v-3.54h1.367v5.688h-1.363l-2.016-3.54v3.54h-1.37V6.878h1.37l2.012 3.539zm2.234 2.148V6.878h3.926v1.058h-2.555v1.2h2.156v1.015h-2.156v1.36h2.547v1.054h-3.918z"
                                              id="line_svg__a"
                                            />
                                          </svg>
                                        </SvgLine>
                                      </component>
                                    </i>
                                  </LocaleReceiver>
                                </Icon>
                              </StyledComponent>
                            </Styled(Icon)>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </CapIcon>
                  </div>
                </div>
                <styled.div
                  className="node-label"
                  type="label5"
                >
                  <StyledComponent
                    className="node-label"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "CapLabelInline": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "rules": Array [
                              "
font-size: ",
                              [Function],
                              ";
font-weight: ",
                              [Function],
                              ";
color: ",
                              [Function],
                              ";
line-height: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                        "_foldedDefaultProps": Object {
                          "type": "label1",
                        },
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "jAkirh",
                          "rules": Array [
                            "
    font-size: ",
                            [Function],
                            ";
    font-weight: ",
                            [Function],
                            ";
    color: ",
                            [Function],
                            ";
    line-height: ",
                            [Function],
                            ";
    ",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "children": [Function],
                          "type": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="label5"
                  >
                    <div
                      className="sc-ifAKCX jAkirh node-label"
                      type="label5"
                    >
                      Line
                    </div>
                  </StyledComponent>
                </styled.div>
              </CapAdvancedIcon>
            </div>
          </div>
          <div
            className="node-container"
            key="wechatOutline"
          >
            <div
              className="node-container-inner"
            >
              <CapAdvancedIcon
                backgroundColor="#fec52e"
                dragRef={[Function]}
                label1={
                  <ForwardRef(styled.div)
                    className="node-label"
                    type="label5"
                  >
                    WeChat
                  </ForwardRef(styled.div)>
                }
                svgProps={
                  Object {
                    "height": "24px",
                    "viewBox": "0 0 24 24",
                    "width": "24px",
                  }
                }
                type="wechatOutline"
              >
                <div
                  className="advanced-icon-container"
                >
                  <div>
                    <CapIcon
                      backgroundProps={
                        Object {
                          "style": Object {
                            "backgroundColor": "#fec52e",
                            "lineHeight": 1,
                            "padding": "9px",
                          },
                        }
                      }
                      style={
                        Object {
                          "color": "#ffffff",
                        }
                      }
                      svgProps={
                        Object {
                          "height": "24px",
                          "viewBox": "0 0 24 24",
                          "width": "24px",
                        }
                      }
                      type="wechatOutline"
                      withBackground={true}
                    >
                      <styled.div
                        className="cap-icon-background"
                        style={
                          Object {
                            "backgroundColor": "#fec52e",
                            "lineHeight": 1,
                            "padding": "9px",
                          }
                        }
                      >
                        <StyledComponent
                          className="cap-icon-background"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "jOYlkw",
                                "rules": Array [
                                  "
  background-color: ",
                                  [Function],
                                  ";
  border-radius: 18px;
  padding: ",
                                  [Function],
                                  ";
  display: inline-block;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          style={
                            Object {
                              "backgroundColor": "#fec52e",
                              "lineHeight": 1,
                              "padding": "9px",
                            }
                          }
                        >
                          <div
                            className="sc-htpNat jOYlkw cap-icon-background"
                            style={
                              Object {
                                "backgroundColor": "#fec52e",
                                "lineHeight": 1,
                                "padding": "9px",
                              }
                            }
                          >
                            <Styled(Icon)
                              className="cap-icon-v2 cap-icon-v2-wechatOutline"
                              component={[Function]}
                              style={
                                Object {
                                  "color": "#ffffff",
                                }
                              }
                            >
                              <StyledComponent
                                className="cap-icon-v2 cap-icon-v2-wechatOutline"
                                component={[Function]}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "kZDkVS",
                                      "rules": Array [
                                        "
  font-size: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "createFromIconfontCN": [Function],
                                    "displayName": "Styled(Icon)",
                                    "foldedComponentIds": Array [],
                                    "getTwoToneColor": [Function],
                                    "render": [Function],
                                    "setTwoToneColor": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                style={
                                  Object {
                                    "color": "#ffffff",
                                  }
                                }
                              >
                                <Icon
                                  className="sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-wechatOutline"
                                  component={[Function]}
                                  style={
                                    Object {
                                      "color": "#ffffff",
                                    }
                                  }
                                >
                                  <LocaleReceiver
                                    componentName="Icon"
                                  >
                                    <i
                                      className="anticon sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-wechatOutline"
                                      style={
                                        Object {
                                          "color": "#ffffff",
                                        }
                                      }
                                    >
                                      <component
                                        aria-hidden={true}
                                        className=""
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        width="1em"
                                      >
                                        <SvgWechatOutline
                                          height="24px"
                                          viewBox="0 0 24 24"
                                          width="24px"
                                        >
                                          <svg
                                            fill="currentColor"
                                            height="24px"
                                            viewBox="0 0 24 24"
                                            width="24px"
                                            xmlns="http://www.w3.org/2000/svg"
                                            xmlnsXlink="http://www.w3.org/1999/xlink"
                                          >
                                            <defs>
                                              <path
                                                d="M10.37 2c5.175 0 9.37 3.454 9.37 7.716 0 .271-.018.54-.051.803C21.667 11.585 23 13.566 23 15.84c0 .925-.227 1.798-.621 2.586l.62 4.457-3.776-1.496a7.034 7.034 0 01-2.86.607c-3.08 0-5.66-1.946-6.41-4.582a10.952 10.952 0 01-3.773-.794l-4.323 3.08.475-6.016C1.488 12.523 1 11.167 1 9.716 1 5.454 5.196 2 10.37 2zm5.994 9.685c-2.36 0-4.292 1.594-4.58 3.64-.023.17-.057.338-.057.515 0 .517.119 1.006.312 1.463.663 1.568 2.345 2.691 4.325 2.691a5.01 5.01 0 002.048-.435l.767-.34.78.31.588.231-.148-1.059-.085-.615.278-.556c.27-.542.409-1.11.409-1.69 0-1.372-.755-2.58-1.902-3.337a4.87 4.87 0 00-1.857-.738 5.174 5.174 0 00-.878-.08zm2.278 2.51a1.1 1.1 0 010 2.197 1.099 1.099 0 010-2.196zm-4.41 0a1.1 1.1 0 010 2.197 1.099 1.099 0 010-2.196zM10.37 4C6.306 4 3 6.564 3 9.716c0 .973.328 1.938.949 2.788l.436.598-.06.738-.136 1.741.83-.592.902-.642 1.023.422a8.804 8.804 0 002.807.634c.242-3.194 3.106-5.718 6.613-5.718.469 0 .927.047 1.369.133 0-.034.007-.068.007-.102C17.74 6.564 14.434 4 10.37 4zM7.43 6.103a1.286 1.286 0 110 2.573 1.286 1.286 0 010-2.573zm5.88 0a1.285 1.285 0 11.001 2.57 1.285 1.285 0 01-.002-2.57z"
                                                id="wechatOutline_svg__a"
                                              />
                                            </defs>
                                            <g
                                              fill="none"
                                              fillRule="evenodd"
                                            >
                                              <mask
                                                fill="#fff"
                                                id="wechatOutline_svg__b"
                                              >
                                                <use
                                                  xlinkHref="#wechatOutline_svg__a"
                                                />
                                              </mask>
                                              <use
                                                fill="#000"
                                                xlinkHref="#wechatOutline_svg__a"
                                              />
                                              <g
                                                fill="#FFF"
                                                mask="url(#wechatOutline_svg__b)"
                                              >
                                                <path
                                                  d="M0 0h24v24H0z"
                                                />
                                              </g>
                                            </g>
                                          </svg>
                                        </SvgWechatOutline>
                                      </component>
                                    </i>
                                  </LocaleReceiver>
                                </Icon>
                              </StyledComponent>
                            </Styled(Icon)>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </CapIcon>
                  </div>
                </div>
                <styled.div
                  className="node-label"
                  type="label5"
                >
                  <StyledComponent
                    className="node-label"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "CapLabelInline": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "rules": Array [
                              "
font-size: ",
                              [Function],
                              ";
font-weight: ",
                              [Function],
                              ";
color: ",
                              [Function],
                              ";
line-height: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                        "_foldedDefaultProps": Object {
                          "type": "label1",
                        },
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "jAkirh",
                          "rules": Array [
                            "
    font-size: ",
                            [Function],
                            ";
    font-weight: ",
                            [Function],
                            ";
    color: ",
                            [Function],
                            ";
    line-height: ",
                            [Function],
                            ";
    ",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "children": [Function],
                          "type": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="label5"
                  >
                    <div
                      className="sc-ifAKCX jAkirh node-label"
                      type="label5"
                    >
                      WeChat
                    </div>
                  </StyledComponent>
                </styled.div>
              </CapAdvancedIcon>
            </div>
          </div>
          <div
            className="node-container"
            key="topXChannel"
          >
            <div
              className="node-container-inner"
            >
              <CapAdvancedIcon
                backgroundColor="#fec52e"
                dragRef={[Function]}
                label1={
                  <ForwardRef(styled.div)
                    className="node-label"
                    type="label5"
                  >
                    Top X channel
                  </ForwardRef(styled.div)>
                }
                svgProps={
                  Object {
                    "height": "24px",
                    "viewBox": "0 0 24 24",
                    "width": "24px",
                  }
                }
                type="topXChannel"
              >
                <div
                  className="advanced-icon-container"
                >
                  <div>
                    <CapIcon
                      backgroundProps={
                        Object {
                          "style": Object {
                            "backgroundColor": "#fec52e",
                            "lineHeight": 1,
                            "padding": "9px",
                          },
                        }
                      }
                      style={
                        Object {
                          "color": "#ffffff",
                        }
                      }
                      svgProps={
                        Object {
                          "height": "24px",
                          "viewBox": "0 0 24 24",
                          "width": "24px",
                        }
                      }
                      type="topXChannel"
                      withBackground={true}
                    >
                      <styled.div
                        className="cap-icon-background"
                        style={
                          Object {
                            "backgroundColor": "#fec52e",
                            "lineHeight": 1,
                            "padding": "9px",
                          }
                        }
                      >
                        <StyledComponent
                          className="cap-icon-background"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "jOYlkw",
                                "rules": Array [
                                  "
  background-color: ",
                                  [Function],
                                  ";
  border-radius: 18px;
  padding: ",
                                  [Function],
                                  ";
  display: inline-block;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          style={
                            Object {
                              "backgroundColor": "#fec52e",
                              "lineHeight": 1,
                              "padding": "9px",
                            }
                          }
                        >
                          <div
                            className="sc-htpNat jOYlkw cap-icon-background"
                            style={
                              Object {
                                "backgroundColor": "#fec52e",
                                "lineHeight": 1,
                                "padding": "9px",
                              }
                            }
                          >
                            <Styled(Icon)
                              className="cap-icon-v2 cap-icon-v2-topXChannel"
                              component={[Function]}
                              style={
                                Object {
                                  "color": "#ffffff",
                                }
                              }
                            >
                              <StyledComponent
                                className="cap-icon-v2 cap-icon-v2-topXChannel"
                                component={[Function]}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "kZDkVS",
                                      "rules": Array [
                                        "
  font-size: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "createFromIconfontCN": [Function],
                                    "displayName": "Styled(Icon)",
                                    "foldedComponentIds": Array [],
                                    "getTwoToneColor": [Function],
                                    "render": [Function],
                                    "setTwoToneColor": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                style={
                                  Object {
                                    "color": "#ffffff",
                                  }
                                }
                              >
                                <Icon
                                  className="sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-topXChannel"
                                  component={[Function]}
                                  style={
                                    Object {
                                      "color": "#ffffff",
                                    }
                                  }
                                >
                                  <LocaleReceiver
                                    componentName="Icon"
                                  >
                                    <i
                                      className="anticon sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-topXChannel"
                                      style={
                                        Object {
                                          "color": "#ffffff",
                                        }
                                      }
                                    >
                                      <component
                                        aria-hidden={true}
                                        className=""
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        width="1em"
                                      >
                                        <SvgTopXChannel
                                          height="24px"
                                          viewBox="0 0 24 24"
                                          width="24px"
                                        >
                                          <svg
                                            fill="currentColor"
                                            height="24px"
                                            viewBox="0 0 24 24"
                                            width="24px"
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <g
                                              fill="none"
                                              fillRule="evenodd"
                                            >
                                              <path
                                                d="M0 0h24v24H0z"
                                              />
                                              <path
                                                d="M12.84 9.78l-1.42-1.42c.69-.68 1.58-1.34 2.94-1.79l.49 1.94c-.89.32-1.5.77-2.01 1.27zM18 7v-.98c-.81.02-1.54.08-2.17.19l.49 1.94c.48-.07 1.05-.12 1.68-.13V7zm0 10v-1.01c-3.68-.1-4.75-1.28-5.88-2.54-.44-.5-.92-1.01-1.55-1.45.49-.34.88-.73 1.24-1.13L10.4 9.46C9.55 10.39 8.86 11 7 11H2v2h5c2.02 0 2.66.71 3.63 1.79 1.24 1.38 2.78 3.08 7.37 3.2V17z"
                                                fill="#FFF"
                                                fillRule="nonzero"
                                              />
                                              <circle
                                                cx={20}
                                                cy={17}
                                                r={2}
                                                stroke="#FFF"
                                                strokeWidth={2}
                                              />
                                              <circle
                                                cx={20}
                                                cy={7}
                                                r={2}
                                                stroke="#FFF"
                                                strokeWidth={2}
                                              />
                                            </g>
                                          </svg>
                                        </SvgTopXChannel>
                                      </component>
                                    </i>
                                  </LocaleReceiver>
                                </Icon>
                              </StyledComponent>
                            </Styled(Icon)>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </CapIcon>
                  </div>
                </div>
                <styled.div
                  className="node-label"
                  type="label5"
                >
                  <StyledComponent
                    className="node-label"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "CapLabelInline": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "rules": Array [
                              "
font-size: ",
                              [Function],
                              ";
font-weight: ",
                              [Function],
                              ";
color: ",
                              [Function],
                              ";
line-height: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                        "_foldedDefaultProps": Object {
                          "type": "label1",
                        },
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "jAkirh",
                          "rules": Array [
                            "
    font-size: ",
                            [Function],
                            ";
    font-weight: ",
                            [Function],
                            ";
    color: ",
                            [Function],
                            ";
    line-height: ",
                            [Function],
                            ";
    ",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "children": [Function],
                          "type": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="label5"
                  >
                    <div
                      className="sc-ifAKCX jAkirh node-label"
                      type="label5"
                    >
                      Top X channel
                    </div>
                  </StyledComponent>
                </styled.div>
              </CapAdvancedIcon>
            </div>
          </div>
          <div
            className="node-container"
            key="channelPriority"
          >
            <div
              className="node-container-inner"
            >
              <CapAdvancedIcon
                backgroundColor="#fec52e"
                dragRef={[Function]}
                label1={
                  <ForwardRef(styled.div)
                    className="node-label"
                    type="label5"
                  >
                    Channel priority
                  </ForwardRef(styled.div)>
                }
                svgProps={
                  Object {
                    "height": "24px",
                    "viewBox": "0 0 24 24",
                    "width": "24px",
                  }
                }
                type="channelPriority"
              >
                <div
                  className="advanced-icon-container"
                >
                  <div>
                    <CapIcon
                      backgroundProps={
                        Object {
                          "style": Object {
                            "backgroundColor": "#fec52e",
                            "lineHeight": 1,
                            "padding": "9px",
                          },
                        }
                      }
                      style={
                        Object {
                          "color": "#ffffff",
                        }
                      }
                      svgProps={
                        Object {
                          "height": "24px",
                          "viewBox": "0 0 24 24",
                          "width": "24px",
                        }
                      }
                      type="channelPriority"
                      withBackground={true}
                    >
                      <styled.div
                        className="cap-icon-background"
                        style={
                          Object {
                            "backgroundColor": "#fec52e",
                            "lineHeight": 1,
                            "padding": "9px",
                          }
                        }
                      >
                        <StyledComponent
                          className="cap-icon-background"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "jOYlkw",
                                "rules": Array [
                                  "
  background-color: ",
                                  [Function],
                                  ";
  border-radius: 18px;
  padding: ",
                                  [Function],
                                  ";
  display: inline-block;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          style={
                            Object {
                              "backgroundColor": "#fec52e",
                              "lineHeight": 1,
                              "padding": "9px",
                            }
                          }
                        >
                          <div
                            className="sc-htpNat jOYlkw cap-icon-background"
                            style={
                              Object {
                                "backgroundColor": "#fec52e",
                                "lineHeight": 1,
                                "padding": "9px",
                              }
                            }
                          >
                            <Styled(Icon)
                              className="cap-icon-v2 cap-icon-v2-channelPriority"
                              component={[Function]}
                              style={
                                Object {
                                  "color": "#ffffff",
                                }
                              }
                            >
                              <StyledComponent
                                className="cap-icon-v2 cap-icon-v2-channelPriority"
                                component={[Function]}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "kZDkVS",
                                      "rules": Array [
                                        "
  font-size: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "createFromIconfontCN": [Function],
                                    "displayName": "Styled(Icon)",
                                    "foldedComponentIds": Array [],
                                    "getTwoToneColor": [Function],
                                    "render": [Function],
                                    "setTwoToneColor": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                style={
                                  Object {
                                    "color": "#ffffff",
                                  }
                                }
                              >
                                <Icon
                                  className="sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-channelPriority"
                                  component={[Function]}
                                  style={
                                    Object {
                                      "color": "#ffffff",
                                    }
                                  }
                                >
                                  <LocaleReceiver
                                    componentName="Icon"
                                  >
                                    <i
                                      className="anticon sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-channelPriority"
                                      style={
                                        Object {
                                          "color": "#ffffff",
                                        }
                                      }
                                    >
                                      <component
                                        aria-hidden={true}
                                        className=""
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        width="1em"
                                      >
                                        <SvgChannelPriority
                                          height="24px"
                                          viewBox="0 0 24 24"
                                          width="24px"
                                        >
                                          <svg
                                            fill="currentColor"
                                            height="24px"
                                            viewBox="0 0 24 24"
                                            width="24px"
                                          >
                                            <defs>
                                              <path
                                                d="M42.397 42.396c-2.314 2.432-5.407 3.912-9.279 4.44-2.717.556-5.831.788-9.343.694-3.512.094-6.626-.138-9.343-.695-3.872-.527-6.965-2.007-9.278-4.439-2.432-2.314-3.911-5.406-4.44-9.278-.556-2.717-.787-5.831-.694-9.343-.093-3.512.138-6.626.695-9.343.528-3.872 2.007-6.965 4.439-9.278 2.313-2.432 5.406-3.912 9.278-4.44 2.717-.556 5.831-.787 9.343-.694 3.512-.093 6.626.138 9.343.695 3.872.527 6.965 2.007 9.279 4.439 2.43 2.313 3.91 5.406 4.438 9.278.557 2.717.789 5.831.695 9.343.094 3.512-.138 6.626-.695 9.343-.527 3.872-2.007 6.964-4.438 9.278z"
                                                id="channel-priority_svg__a"
                                              />
                                              <path
                                                d="M14 18H0v-8a1 1 0 011-1h5V1.059C6 .474 6.448 0 7 0h6c.552 0 1 .474 1 1.059V5h5c.552 0 1 .485 1 1.083V18h-6zm0-2h4V7h-4v9zm-2 0V2H8v14h4zm-6-5H2v5h4v-5z"
                                                id="channel-priority_svg__c"
                                              />
                                            </defs>
                                            <g
                                              fill="none"
                                              fillRule="evenodd"
                                            >
                                              <g
                                                transform="translate(1 2)"
                                              >
                                                <mask
                                                  fill="#fff"
                                                  id="channel-priority_svg__d"
                                                >
                                                  <use
                                                    xlinkHref="#channel-priority_svg__c"
                                                  />
                                                </mask>
                                                <use
                                                  fill="currentColor"
                                                  fillRule="nonzero"
                                                  xlinkHref="#channel-priority_svg__c"
                                                />
                                                <g
                                                  fill="currentColor"
                                                  mask="url(#channel-priority_svg__d)"
                                                >
                                                  <path
                                                    d="M-2-3h24v24H-2z"
                                                  />
                                                </g>
                                              </g>
                                            </g>
                                          </svg>
                                        </SvgChannelPriority>
                                      </component>
                                    </i>
                                  </LocaleReceiver>
                                </Icon>
                              </StyledComponent>
                            </Styled(Icon)>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </CapIcon>
                  </div>
                </div>
                <styled.div
                  className="node-label"
                  type="label5"
                >
                  <StyledComponent
                    className="node-label"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "CapLabelInline": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "rules": Array [
                              "
font-size: ",
                              [Function],
                              ";
font-weight: ",
                              [Function],
                              ";
color: ",
                              [Function],
                              ";
line-height: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                        "_foldedDefaultProps": Object {
                          "type": "label1",
                        },
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "jAkirh",
                          "rules": Array [
                            "
    font-size: ",
                            [Function],
                            ";
    font-weight: ",
                            [Function],
                            ";
    color: ",
                            [Function],
                            ";
    line-height: ",
                            [Function],
                            ";
    ",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "children": [Function],
                          "type": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="label5"
                  >
                    <div
                      className="sc-ifAKCX jAkirh node-label"
                      type="label5"
                    >
                      Channel priority
                    </div>
                  </StyledComponent>
                </styled.div>
              </CapAdvancedIcon>
            </div>
          </div>
          <div
            className="node-container"
            key="lab"
          >
            <div
              className="node-container-inner"
            >
              <CapAdvancedIcon
                backgroundColor="#fec52e"
                dragRef={[Function]}
                label1={
                  <ForwardRef(styled.div)
                    className="node-label"
                    type="label5"
                  >
                    A/B test
                  </ForwardRef(styled.div)>
                }
                svgProps={
                  Object {
                    "height": "24px",
                    "viewBox": "0 0 24 24",
                    "width": "24px",
                  }
                }
                type="lab"
              >
                <div
                  className="advanced-icon-container"
                >
                  <div>
                    <CapIcon
                      backgroundProps={
                        Object {
                          "style": Object {
                            "backgroundColor": "#fec52e",
                            "lineHeight": 1,
                            "padding": "9px",
                          },
                        }
                      }
                      style={
                        Object {
                          "color": "#ffffff",
                        }
                      }
                      svgProps={
                        Object {
                          "height": "24px",
                          "viewBox": "0 0 24 24",
                          "width": "24px",
                        }
                      }
                      type="lab"
                      withBackground={true}
                    >
                      <styled.div
                        className="cap-icon-background"
                        style={
                          Object {
                            "backgroundColor": "#fec52e",
                            "lineHeight": 1,
                            "padding": "9px",
                          }
                        }
                      >
                        <StyledComponent
                          className="cap-icon-background"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "jOYlkw",
                                "rules": Array [
                                  "
  background-color: ",
                                  [Function],
                                  ";
  border-radius: 18px;
  padding: ",
                                  [Function],
                                  ";
  display: inline-block;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          style={
                            Object {
                              "backgroundColor": "#fec52e",
                              "lineHeight": 1,
                              "padding": "9px",
                            }
                          }
                        >
                          <div
                            className="sc-htpNat jOYlkw cap-icon-background"
                            style={
                              Object {
                                "backgroundColor": "#fec52e",
                                "lineHeight": 1,
                                "padding": "9px",
                              }
                            }
                          >
                            <Styled(Icon)
                              className="cap-icon-v2 cap-icon-v2-lab"
                              component={[Function]}
                              style={
                                Object {
                                  "color": "#ffffff",
                                }
                              }
                            >
                              <StyledComponent
                                className="cap-icon-v2 cap-icon-v2-lab"
                                component={[Function]}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "kZDkVS",
                                      "rules": Array [
                                        "
  font-size: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "createFromIconfontCN": [Function],
                                    "displayName": "Styled(Icon)",
                                    "foldedComponentIds": Array [],
                                    "getTwoToneColor": [Function],
                                    "render": [Function],
                                    "setTwoToneColor": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                style={
                                  Object {
                                    "color": "#ffffff",
                                  }
                                }
                              >
                                <Icon
                                  className="sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-lab"
                                  component={[Function]}
                                  style={
                                    Object {
                                      "color": "#ffffff",
                                    }
                                  }
                                >
                                  <LocaleReceiver
                                    componentName="Icon"
                                  >
                                    <i
                                      className="anticon sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-lab"
                                      style={
                                        Object {
                                          "color": "#ffffff",
                                        }
                                      }
                                    >
                                      <component
                                        aria-hidden={true}
                                        className=""
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        width="1em"
                                      >
                                        <SvgLab
                                          height="24px"
                                          viewBox="0 0 24 24"
                                          width="24px"
                                        >
                                          <svg
                                            fill="currentColor"
                                            height="24px"
                                            viewBox="0 0 24 24"
                                            width="24px"
                                          >
                                            <path
                                              d="M5.044 18.995c.059-.095.099-.169.147-.237 1.8-2.521 3.604-5.04 5.4-7.565.11-.155.219-.219.412-.216.687.012 1.374-.001 2.062.011.096.001.229.056.284.132 1.867 2.602 3.727 5.209 5.588 7.817.005.007.006.016.022.058H5.044zm5.963-10.021h1.98V4.992h-1.98v3.982zm9.49 8.679c.513.712.687 1.452.272 2.255-.38.734-1.015 1.079-1.831 1.088-.786.008-1.572.002-2.357.002l-11.434-.001c-1.043 0-1.772-.518-2.06-1.462-.18-.596-.077-1.157.276-1.657.906-1.284 1.824-2.559 2.739-3.836.92-1.285 1.842-2.568 2.757-3.856a.667.667 0 0 0 .137-.358c.009-1.555.006-3.109.006-4.664 0-.051-.008-.104-.015-.191H8.01V3h7.986v1.963h-.978c-.007.113-.016.198-.016.283-.001 1.501-.005 3.001.006 4.502a.857.857 0 0 0 .153.46 1572.12 1572.12 0 0 0 5.335 7.445zm-9.993-2.657c-.801-.002-1.488.678-1.5 1.478a1.524 1.524 0 0 0 1.483 1.52A1.523 1.523 0 0 0 12 16.503a1.521 1.521 0 0 0-1.496-1.508zm2.505-1.993a.993.993 0 0 0-1.006.996c.003.53.462.99.99.994a.993.993 0 0 0 .998-1.005.966.966 0 0 0-.982-.985z"
                                              id="lab_svg__a"
                                            />
                                          </svg>
                                        </SvgLab>
                                      </component>
                                    </i>
                                  </LocaleReceiver>
                                </Icon>
                              </StyledComponent>
                            </Styled(Icon)>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </CapIcon>
                  </div>
                </div>
                <styled.div
                  className="node-label"
                  type="label5"
                >
                  <StyledComponent
                    className="node-label"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "CapLabelInline": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "rules": Array [
                              "
font-size: ",
                              [Function],
                              ";
font-weight: ",
                              [Function],
                              ";
color: ",
                              [Function],
                              ";
line-height: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                        "_foldedDefaultProps": Object {
                          "type": "label1",
                        },
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "jAkirh",
                          "rules": Array [
                            "
    font-size: ",
                            [Function],
                            ";
    font-weight: ",
                            [Function],
                            ";
    color: ",
                            [Function],
                            ";
    line-height: ",
                            [Function],
                            ";
    ",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "children": [Function],
                          "type": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="label5"
                  >
                    <div
                      className="sc-ifAKCX jAkirh node-label"
                      type="label5"
                    >
                      A/B test
                    </div>
                  </StyledComponent>
                </styled.div>
              </CapAdvancedIcon>
            </div>
          </div>
        </div>
      </div>
      <div
        className="category-container"
        key="Flow Control"
      >
        <div
          className="title-row"
        >
          <styled.div
            type="h4"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "CapHeadingSpan": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bwzfXH",
                      "isStatic": false,
                      "rules": Array [
                        "
font-size: ",
                        [Function],
                        ";
font-weight: ",
                        [Function],
                        ";
color: ",
                        [Function],
                        ";
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bwzfXH",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "_foldedDefaultProps": Object {
                    "type": "h5",
                  },
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "kZeOKr",
                    "rules": Array [
                      "
    font-size: ",
                      [Function],
                      ";
    font-weight: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
    line-height: ",
                      [Function],
                      ";
    ",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "propTypes": Object {
                    "children": [Function],
                    "type": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              type="h4"
            >
              <div
                className="sc-bdVaJa kZeOKr"
                type="h4"
              >
                Flow Control
              </div>
            </StyledComponent>
          </styled.div>
          <CapTooltip
            title="flow control nodes"
          >
            <Tooltip
              arrowPointAtCenter={false}
              autoAdjustOverflow={true}
              mouseEnterDelay={0.1}
              mouseLeaveDelay={0.1}
              overlayClassName="cap-tooltip-overlay-v2"
              placement="top"
              title="flow control nodes"
              transitionName="zoom-big-fast"
            >
              <Tooltip
                align={Object {}}
                arrowContent={null}
                arrowPointAtCenter={false}
                autoAdjustOverflow={true}
                builtinPlacements={
                  Object {
                    "bottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tc",
                        "bc",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "bottomLeft": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tl",
                        "bl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "bottomRight": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tr",
                        "br",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "left": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "cr",
                        "cl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "leftBottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "br",
                        "bl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "leftTop": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tr",
                        "tl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "right": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "cl",
                        "cr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "rightBottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bl",
                        "br",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "rightTop": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tl",
                        "tr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "top": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bc",
                        "tc",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "topLeft": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bl",
                        "tl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "topRight": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "br",
                        "tr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                  }
                }
                destroyTooltipOnHide={false}
                mouseEnterDelay={0.1}
                mouseLeaveDelay={0.1}
                onPopupAlign={[Function]}
                onVisibleChange={[Function]}
                overlay="flow control nodes"
                overlayClassName="cap-tooltip-overlay-v2"
                placement="top"
                prefixCls="ant-tooltip"
                title="flow control nodes"
                transitionName="zoom-big-fast"
                trigger={
                  Array [
                    "hover",
                  ]
                }
                visible={false}
              >
                <Trigger
                  action={
                    Array [
                      "hover",
                    ]
                  }
                  afterPopupVisibleChange={[Function]}
                  arrowContent={null}
                  arrowPointAtCenter={false}
                  autoAdjustOverflow={true}
                  blurDelay={0.15}
                  builtinPlacements={
                    Object {
                      "bottom": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tc",
                          "bc",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "bottomLeft": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tl",
                          "bl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "bottomRight": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tr",
                          "br",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "left": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          -4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "cr",
                          "cl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "leftBottom": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          -4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "br",
                          "bl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "leftTop": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          -4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tr",
                          "tl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "right": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "cl",
                          "cr",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "rightBottom": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bl",
                          "br",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "rightTop": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tl",
                          "tr",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "top": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bc",
                          "tc",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "topLeft": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bl",
                          "tl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "topRight": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "br",
                          "tr",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                    }
                  }
                  defaultPopupVisible={false}
                  destroyPopupOnHide={false}
                  focusDelay={0}
                  getDocument={[Function]}
                  getPopupClassNameFromAlign={[Function]}
                  hideAction={Array []}
                  mask={false}
                  maskClosable={true}
                  mouseEnterDelay={0.1}
                  mouseLeaveDelay={0.1}
                  onPopupAlign={[Function]}
                  onPopupVisibleChange={[Function]}
                  overlay="flow control nodes"
                  popup={[Function]}
                  popupAlign={Object {}}
                  popupClassName="cap-tooltip-overlay-v2"
                  popupPlacement="top"
                  popupStyle={Object {}}
                  popupTransitionName="zoom-big-fast"
                  popupVisible={false}
                  prefixCls="ant-tooltip"
                  showAction={Array []}
                  title="flow control nodes"
                  visible={false}
                >
                  <CapIcon
                    className="info-icon"
                    key="trigger"
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                    size="xs"
                    type="info"
                  >
                    <Styled(Icon)
                      className="cap-icon-v2 cap-icon-v2-info info-icon"
                      component={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      size="xs"
                    >
                      <StyledComponent
                        className="cap-icon-v2 cap-icon-v2-info info-icon"
                        component={[Function]}
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bxivhb",
                              "isStatic": false,
                              "lastClassName": "kZDkVS",
                              "rules": Array [
                                "
  font-size: ",
                                [Function],
                                ";
",
                              ],
                            },
                            "createFromIconfontCN": [Function],
                            "displayName": "Styled(Icon)",
                            "foldedComponentIds": Array [],
                            "getTwoToneColor": [Function],
                            "render": [Function],
                            "setTwoToneColor": [Function],
                            "styledComponentId": "sc-bxivhb",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        size="xs"
                      >
                        <Icon
                          className="sc-bxivhb fYYxJD cap-icon-v2 cap-icon-v2-info info-icon"
                          component={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          size="xs"
                        >
                          <LocaleReceiver
                            componentName="Icon"
                          >
                            <i
                              className="anticon sc-bxivhb fYYxJD cap-icon-v2 cap-icon-v2-info info-icon"
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              size="xs"
                            >
                              <component
                                aria-hidden={true}
                                className=""
                                fill="currentColor"
                                focusable="false"
                                height="1em"
                                width="1em"
                              >
                                <SvgInfo>
                                  <svg
                                    fill="currentColor"
                                    height="1em"
                                    viewBox="0 0 24 24"
                                    width="1em"
                                  >
                                    <path
                                      d="M12 11a1 1 0 0 1 1 1v4a1 1 0 0 1-2 0v-4a1 1 0 0 1 1-1zm0-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 4.5a1.5 1.5 0 1 0 .001 3.001A1.5 1.5 0 0 0 12 6.5zM12 20c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"
                                      id="info_svg__a"
                                    />
                                  </svg>
                                </SvgInfo>
                              </component>
                            </i>
                          </LocaleReceiver>
                        </Icon>
                      </StyledComponent>
                    </Styled(Icon)>
                  </CapIcon>
                </Trigger>
              </Tooltip>
            </Tooltip>
          </CapTooltip>
        </div>
        <div
          className="icons-container"
        >
          <div
            className="node-container"
            key="alarm"
          >
            <div
              className="node-container-inner"
            >
              <CapAdvancedIcon
                backgroundColor="#23cccc"
                dragRef={[Function]}
                label1={
                  <ForwardRef(styled.div)
                    className="node-label"
                    type="label5"
                  >
                    Wait
                  </ForwardRef(styled.div)>
                }
                svgProps={
                  Object {
                    "height": "24px",
                    "viewBox": "0 0 24 24",
                    "width": "24px",
                  }
                }
                type="alarm"
              >
                <div
                  className="advanced-icon-container"
                >
                  <div>
                    <CapIcon
                      backgroundProps={
                        Object {
                          "style": Object {
                            "backgroundColor": "#23cccc",
                            "lineHeight": 1,
                            "padding": "9px",
                          },
                        }
                      }
                      style={
                        Object {
                          "color": "#ffffff",
                        }
                      }
                      svgProps={
                        Object {
                          "height": "24px",
                          "viewBox": "0 0 24 24",
                          "width": "24px",
                        }
                      }
                      type="alarm"
                      withBackground={true}
                    >
                      <styled.div
                        className="cap-icon-background"
                        style={
                          Object {
                            "backgroundColor": "#23cccc",
                            "lineHeight": 1,
                            "padding": "9px",
                          }
                        }
                      >
                        <StyledComponent
                          className="cap-icon-background"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "jOYlkw",
                                "rules": Array [
                                  "
  background-color: ",
                                  [Function],
                                  ";
  border-radius: 18px;
  padding: ",
                                  [Function],
                                  ";
  display: inline-block;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          style={
                            Object {
                              "backgroundColor": "#23cccc",
                              "lineHeight": 1,
                              "padding": "9px",
                            }
                          }
                        >
                          <div
                            className="sc-htpNat jOYlkw cap-icon-background"
                            style={
                              Object {
                                "backgroundColor": "#23cccc",
                                "lineHeight": 1,
                                "padding": "9px",
                              }
                            }
                          >
                            <Styled(Icon)
                              className="cap-icon-v2 cap-icon-v2-alarm"
                              component={[Function]}
                              style={
                                Object {
                                  "color": "#ffffff",
                                }
                              }
                            >
                              <StyledComponent
                                className="cap-icon-v2 cap-icon-v2-alarm"
                                component={[Function]}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "kZDkVS",
                                      "rules": Array [
                                        "
  font-size: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "createFromIconfontCN": [Function],
                                    "displayName": "Styled(Icon)",
                                    "foldedComponentIds": Array [],
                                    "getTwoToneColor": [Function],
                                    "render": [Function],
                                    "setTwoToneColor": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                style={
                                  Object {
                                    "color": "#ffffff",
                                  }
                                }
                              >
                                <Icon
                                  className="sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-alarm"
                                  component={[Function]}
                                  style={
                                    Object {
                                      "color": "#ffffff",
                                    }
                                  }
                                >
                                  <LocaleReceiver
                                    componentName="Icon"
                                  >
                                    <i
                                      className="anticon sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-alarm"
                                      style={
                                        Object {
                                          "color": "#ffffff",
                                        }
                                      }
                                    >
                                      <component
                                        aria-hidden={true}
                                        className=""
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        width="1em"
                                      >
                                        <SvgAlarm
                                          height="24px"
                                          viewBox="0 0 24 24"
                                          width="24px"
                                        >
                                          <svg
                                            fill="currentColor"
                                            height="24px"
                                            viewBox="0 0 24 24"
                                            width="24px"
                                          >
                                            <path
                                              d="M22 5.86L17.4 2l-1.29 1.53 4.6 3.86L22 5.86zM7.88 3.53L6.6 2 2 5.85l1.29 1.53 4.59-3.85zm4.62 4.61H11v6l4.75 2.85.75-1.23-4-2.37V8.14zm-.5-4a9 9 0 0 0-9 9c0 4.97 4.02 9 9 9a9 9 0 0 0 0-18zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z"
                                              id="alarm_svg__a"
                                            />
                                          </svg>
                                        </SvgAlarm>
                                      </component>
                                    </i>
                                  </LocaleReceiver>
                                </Icon>
                              </StyledComponent>
                            </Styled(Icon)>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </CapIcon>
                  </div>
                </div>
                <styled.div
                  className="node-label"
                  type="label5"
                >
                  <StyledComponent
                    className="node-label"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "CapLabelInline": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "rules": Array [
                              "
font-size: ",
                              [Function],
                              ";
font-weight: ",
                              [Function],
                              ";
color: ",
                              [Function],
                              ";
line-height: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                        "_foldedDefaultProps": Object {
                          "type": "label1",
                        },
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "jAkirh",
                          "rules": Array [
                            "
    font-size: ",
                            [Function],
                            ";
    font-weight: ",
                            [Function],
                            ";
    color: ",
                            [Function],
                            ";
    line-height: ",
                            [Function],
                            ";
    ",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "children": [Function],
                          "type": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="label5"
                  >
                    <div
                      className="sc-ifAKCX jAkirh node-label"
                      type="label5"
                    >
                      Wait
                    </div>
                  </StyledComponent>
                </styled.div>
              </CapAdvancedIcon>
            </div>
          </div>
          <div
            className="node-container"
            key="waitEvent"
          >
            <div
              className="node-container-inner"
            >
              <CapAdvancedIcon
                backgroundColor="#23cccc"
                dragRef={[Function]}
                label1={
                  <ForwardRef(styled.div)
                    className="node-label"
                    type="label5"
                  >
                    Wait till event
                  </ForwardRef(styled.div)>
                }
                svgProps={
                  Object {
                    "height": "24px",
                    "viewBox": "0 0 24 24",
                    "width": "24px",
                  }
                }
                type="waitEvent"
              >
                <div
                  className="advanced-icon-container"
                >
                  <div>
                    <CapIcon
                      backgroundProps={
                        Object {
                          "style": Object {
                            "backgroundColor": "#23cccc",
                            "lineHeight": 1,
                            "padding": "9px",
                          },
                        }
                      }
                      style={
                        Object {
                          "color": "#ffffff",
                        }
                      }
                      svgProps={
                        Object {
                          "height": "24px",
                          "viewBox": "0 0 24 24",
                          "width": "24px",
                        }
                      }
                      type="waitEvent"
                      withBackground={true}
                    >
                      <styled.div
                        className="cap-icon-background"
                        style={
                          Object {
                            "backgroundColor": "#23cccc",
                            "lineHeight": 1,
                            "padding": "9px",
                          }
                        }
                      >
                        <StyledComponent
                          className="cap-icon-background"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "jOYlkw",
                                "rules": Array [
                                  "
  background-color: ",
                                  [Function],
                                  ";
  border-radius: 18px;
  padding: ",
                                  [Function],
                                  ";
  display: inline-block;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          style={
                            Object {
                              "backgroundColor": "#23cccc",
                              "lineHeight": 1,
                              "padding": "9px",
                            }
                          }
                        >
                          <div
                            className="sc-htpNat jOYlkw cap-icon-background"
                            style={
                              Object {
                                "backgroundColor": "#23cccc",
                                "lineHeight": 1,
                                "padding": "9px",
                              }
                            }
                          >
                            <Styled(Icon)
                              className="cap-icon-v2 cap-icon-v2-waitEvent"
                              component={[Function]}
                              style={
                                Object {
                                  "color": "#ffffff",
                                }
                              }
                            >
                              <StyledComponent
                                className="cap-icon-v2 cap-icon-v2-waitEvent"
                                component={[Function]}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "kZDkVS",
                                      "rules": Array [
                                        "
  font-size: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "createFromIconfontCN": [Function],
                                    "displayName": "Styled(Icon)",
                                    "foldedComponentIds": Array [],
                                    "getTwoToneColor": [Function],
                                    "render": [Function],
                                    "setTwoToneColor": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                style={
                                  Object {
                                    "color": "#ffffff",
                                  }
                                }
                              >
                                <Icon
                                  className="sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-waitEvent"
                                  component={[Function]}
                                  style={
                                    Object {
                                      "color": "#ffffff",
                                    }
                                  }
                                >
                                  <LocaleReceiver
                                    componentName="Icon"
                                  >
                                    <i
                                      className="anticon sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-waitEvent"
                                      style={
                                        Object {
                                          "color": "#ffffff",
                                        }
                                      }
                                    >
                                      <component
                                        aria-hidden={true}
                                        className=""
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        width="1em"
                                      >
                                        <SvgWaitEvent
                                          height="24px"
                                          viewBox="0 0 24 24"
                                          width="24px"
                                        >
                                          <svg
                                            fill="currentColor"
                                            height="24px"
                                            viewBox="0 0 24 24"
                                            width="24px"
                                            xmlns="http://www.w3.org/2000/svg"
                                            xmlnsXlink="http://www.w3.org/1999/xlink"
                                          >
                                            <defs>
                                              <path
                                                d="M20 3.86L15.4 0l-1.29 1.53 4.6 3.86L20 3.86zM5.88 1.53L4.6 0 0 3.85l1.29 1.53 4.59-3.85zm4.62 4.61H9v6l4.003 2.403.84-1.096L10.5 11.39V6.14zm-.5-4c-4.97 0-9 4.03-9 9s4.02 9 9 9a9 9 0 000-18zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7zm.965 1.874v-2.012c.007.071.146.071.415 0a6.83 6.83 0 001.62-.53c1.278-.608 1.974-1.385 2.394-1.863.276-.304.642-.884.941-1.476a6.5 6.5 0 00.552-1.777c.093-.431.113-.977.114-1.596L17 10.712l1.977-.024c.03.533.03.907 0 1.121-.066.505-.066.7-.141 1.083-.07.392-.235.936-.458 1.544a7.559 7.559 0 01-.677 1.366c-.228.37-.474.738-.788 1.094-.304.38-.554.633-.826.875-.766.681-1.471 1.15-2.36 1.56a9.342 9.342 0 01-2.205.683c-.77.126-.557 0-.557 0z"
                                                id="wait-event_svg__a"
                                              />
                                              <path
                                                d="M1.89 8.638l.496-2.891-1.651-.012a.736.736 0 01-.66-.411.728.728 0 01.085-.778L3.508.28A.73.73 0 014.8.873l-.47 2.53 1.437.01c.271 0 .52.156.646.393.13.244.11.55-.047.76L3.214 9.171a.727.727 0 01-.881.275.72.72 0 01-.442-.809zm2.966-4.187l-1.2-.01-.295-.358.328-1.76-2 2.547 1.332.01.296.353-.335 1.956 1.874-2.738z"
                                                id="wait-event_svg__c"
                                              />
                                            </defs>
                                            <g
                                              fill="none"
                                              fillRule="evenodd"
                                            >
                                              <g
                                                transform="translate(2 1.25)"
                                              >
                                                <mask
                                                  fill="#fff"
                                                  id="wait-event_svg__b"
                                                >
                                                  <use
                                                    xlinkHref="#wait-event_svg__a"
                                                  />
                                                </mask>
                                                <use
                                                  fill="#FFF"
                                                  fillRule="nonzero"
                                                  xlinkHref="#wait-event_svg__a"
                                                />
                                                <g
                                                  fill="#FFF"
                                                  mask="url(#wait-event_svg__b)"
                                                >
                                                  <path
                                                    d="M-2-2h24v24H-2z"
                                                  />
                                                </g>
                                              </g>
                                              <g
                                                transform="translate(14.5 13.25)"
                                              >
                                                <mask
                                                  fill="#fff"
                                                  id="wait-event_svg__d"
                                                >
                                                  <use
                                                    xlinkHref="#wait-event_svg__c"
                                                  />
                                                </mask>
                                                <use
                                                  fill="#7A869A"
                                                  fillRule="nonzero"
                                                  xlinkHref="#wait-event_svg__c"
                                                />
                                                <g
                                                  fill="#FFF"
                                                  mask="url(#wait-event_svg__d)"
                                                >
                                                  <path
                                                    d="M-1 0H9v10H-1z"
                                                  />
                                                </g>
                                              </g>
                                            </g>
                                          </svg>
                                        </SvgWaitEvent>
                                      </component>
                                    </i>
                                  </LocaleReceiver>
                                </Icon>
                              </StyledComponent>
                            </Styled(Icon)>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </CapIcon>
                  </div>
                </div>
                <styled.div
                  className="node-label"
                  type="label5"
                >
                  <StyledComponent
                    className="node-label"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "CapLabelInline": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "rules": Array [
                              "
font-size: ",
                              [Function],
                              ";
font-weight: ",
                              [Function],
                              ";
color: ",
                              [Function],
                              ";
line-height: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                        "_foldedDefaultProps": Object {
                          "type": "label1",
                        },
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "jAkirh",
                          "rules": Array [
                            "
    font-size: ",
                            [Function],
                            ";
    font-weight: ",
                            [Function],
                            ";
    color: ",
                            [Function],
                            ";
    line-height: ",
                            [Function],
                            ";
    ",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "children": [Function],
                          "type": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="label5"
                  >
                    <div
                      className="sc-ifAKCX jAkirh node-label"
                      type="label5"
                    >
                      Wait till event
                    </div>
                  </StyledComponent>
                </styled.div>
              </CapAdvancedIcon>
            </div>
          </div>
          <div
            className="node-container"
            key="join"
          >
            <div
              className="node-container-inner"
            >
              <CapAdvancedIcon
                backgroundColor="#23cccc"
                dragRef={[Function]}
                label1={
                  <ForwardRef(styled.div)
                    className="node-label"
                    type="label5"
                  >
                    Join
                  </ForwardRef(styled.div)>
                }
                svgProps={
                  Object {
                    "height": "24px",
                    "viewBox": "0 0 24 24",
                    "width": "24px",
                  }
                }
                type="join"
              >
                <div
                  className="advanced-icon-container"
                >
                  <div>
                    <CapIcon
                      backgroundProps={
                        Object {
                          "style": Object {
                            "backgroundColor": "#23cccc",
                            "lineHeight": 1,
                            "padding": "9px",
                          },
                        }
                      }
                      style={
                        Object {
                          "color": "#ffffff",
                        }
                      }
                      svgProps={
                        Object {
                          "height": "24px",
                          "viewBox": "0 0 24 24",
                          "width": "24px",
                        }
                      }
                      type="join"
                      withBackground={true}
                    >
                      <styled.div
                        className="cap-icon-background"
                        style={
                          Object {
                            "backgroundColor": "#23cccc",
                            "lineHeight": 1,
                            "padding": "9px",
                          }
                        }
                      >
                        <StyledComponent
                          className="cap-icon-background"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "jOYlkw",
                                "rules": Array [
                                  "
  background-color: ",
                                  [Function],
                                  ";
  border-radius: 18px;
  padding: ",
                                  [Function],
                                  ";
  display: inline-block;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          style={
                            Object {
                              "backgroundColor": "#23cccc",
                              "lineHeight": 1,
                              "padding": "9px",
                            }
                          }
                        >
                          <div
                            className="sc-htpNat jOYlkw cap-icon-background"
                            style={
                              Object {
                                "backgroundColor": "#23cccc",
                                "lineHeight": 1,
                                "padding": "9px",
                              }
                            }
                          >
                            <Styled(Icon)
                              className="cap-icon-v2 cap-icon-v2-join"
                              component={[Function]}
                              style={
                                Object {
                                  "color": "#ffffff",
                                }
                              }
                            >
                              <StyledComponent
                                className="cap-icon-v2 cap-icon-v2-join"
                                component={[Function]}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "kZDkVS",
                                      "rules": Array [
                                        "
  font-size: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "createFromIconfontCN": [Function],
                                    "displayName": "Styled(Icon)",
                                    "foldedComponentIds": Array [],
                                    "getTwoToneColor": [Function],
                                    "render": [Function],
                                    "setTwoToneColor": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                style={
                                  Object {
                                    "color": "#ffffff",
                                  }
                                }
                              >
                                <Icon
                                  className="sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-join"
                                  component={[Function]}
                                  style={
                                    Object {
                                      "color": "#ffffff",
                                    }
                                  }
                                >
                                  <LocaleReceiver
                                    componentName="Icon"
                                  >
                                    <i
                                      className="anticon sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-join"
                                      style={
                                        Object {
                                          "color": "#ffffff",
                                        }
                                      }
                                    >
                                      <component
                                        aria-hidden={true}
                                        className=""
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        width="1em"
                                      >
                                        <SvgCombineWhite24Px
                                          height="24px"
                                          viewBox="0 0 24 24"
                                          width="24px"
                                        >
                                          <svg
                                            fill="currentColor"
                                            height="24px"
                                            viewBox="0 0 24 24"
                                            width="24px"
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <g
                                              fill="none"
                                              fillRule="evenodd"
                                            >
                                              <path
                                                d="M0 0h24v24H0z"
                                              />
                                              <path
                                                d="M11.266 16.276V13.07h6.101v3.607l3.92-3.92c.134-.135.373-.387.713-.757a32.2 32.2 0 00-.713-.756l-3.92-3.92v3.607h-6.101V7.724a4.638 4.638 0 00-4.633-4.633H2v2.138h4.633a2.496 2.496 0 012.494 2.495v3.207H2v2.138h7.127v3.207a2.496 2.496 0 01-2.494 2.495H2v2.138h4.633a4.638 4.638 0 004.633-4.633z"
                                                fill="#FFF"
                                                fillRule="nonzero"
                                              />
                                            </g>
                                          </svg>
                                        </SvgCombineWhite24Px>
                                      </component>
                                    </i>
                                  </LocaleReceiver>
                                </Icon>
                              </StyledComponent>
                            </Styled(Icon)>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </CapIcon>
                  </div>
                </div>
                <styled.div
                  className="node-label"
                  type="label5"
                >
                  <StyledComponent
                    className="node-label"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "CapLabelInline": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "rules": Array [
                              "
font-size: ",
                              [Function],
                              ";
font-weight: ",
                              [Function],
                              ";
color: ",
                              [Function],
                              ";
line-height: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                        "_foldedDefaultProps": Object {
                          "type": "label1",
                        },
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "jAkirh",
                          "rules": Array [
                            "
    font-size: ",
                            [Function],
                            ";
    font-weight: ",
                            [Function],
                            ";
    color: ",
                            [Function],
                            ";
    line-height: ",
                            [Function],
                            ";
    ",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "children": [Function],
                          "type": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="label5"
                  >
                    <div
                      className="sc-ifAKCX jAkirh node-label"
                      type="label5"
                    >
                      Join
                    </div>
                  </StyledComponent>
                </styled.div>
              </CapAdvancedIcon>
            </div>
          </div>
          <div
            className="node-container"
            key="engagementSplit"
          >
            <div
              className="node-container-inner"
            >
              <CapAdvancedIcon
                backgroundColor="#23cccc"
                dragRef={[Function]}
                label1={
                  <ForwardRef(styled.div)
                    className="node-label"
                    type="label5"
                  >
                    Engagement split
                  </ForwardRef(styled.div)>
                }
                svgProps={
                  Object {
                    "height": "24px",
                    "viewBox": "0 0 24 24",
                    "width": "24px",
                  }
                }
                type="engagementSplit"
              >
                <div
                  className="advanced-icon-container"
                >
                  <div>
                    <CapIcon
                      backgroundProps={
                        Object {
                          "style": Object {
                            "backgroundColor": "#23cccc",
                            "lineHeight": 1,
                            "padding": "9px",
                          },
                        }
                      }
                      style={
                        Object {
                          "color": "#ffffff",
                        }
                      }
                      svgProps={
                        Object {
                          "height": "24px",
                          "viewBox": "0 0 24 24",
                          "width": "24px",
                        }
                      }
                      type="engagementSplit"
                      withBackground={true}
                    >
                      <styled.div
                        className="cap-icon-background"
                        style={
                          Object {
                            "backgroundColor": "#23cccc",
                            "lineHeight": 1,
                            "padding": "9px",
                          }
                        }
                      >
                        <StyledComponent
                          className="cap-icon-background"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "jOYlkw",
                                "rules": Array [
                                  "
  background-color: ",
                                  [Function],
                                  ";
  border-radius: 18px;
  padding: ",
                                  [Function],
                                  ";
  display: inline-block;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          style={
                            Object {
                              "backgroundColor": "#23cccc",
                              "lineHeight": 1,
                              "padding": "9px",
                            }
                          }
                        >
                          <div
                            className="sc-htpNat jOYlkw cap-icon-background"
                            style={
                              Object {
                                "backgroundColor": "#23cccc",
                                "lineHeight": 1,
                                "padding": "9px",
                              }
                            }
                          >
                            <Styled(Icon)
                              className="cap-icon-v2 cap-icon-v2-engagementSplit"
                              component={[Function]}
                              style={
                                Object {
                                  "color": "#ffffff",
                                }
                              }
                            >
                              <StyledComponent
                                className="cap-icon-v2 cap-icon-v2-engagementSplit"
                                component={[Function]}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "kZDkVS",
                                      "rules": Array [
                                        "
  font-size: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "createFromIconfontCN": [Function],
                                    "displayName": "Styled(Icon)",
                                    "foldedComponentIds": Array [],
                                    "getTwoToneColor": [Function],
                                    "render": [Function],
                                    "setTwoToneColor": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                style={
                                  Object {
                                    "color": "#ffffff",
                                  }
                                }
                              >
                                <Icon
                                  className="sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-engagementSplit"
                                  component={[Function]}
                                  style={
                                    Object {
                                      "color": "#ffffff",
                                    }
                                  }
                                >
                                  <LocaleReceiver
                                    componentName="Icon"
                                  >
                                    <i
                                      className="anticon sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-engagementSplit"
                                      style={
                                        Object {
                                          "color": "#ffffff",
                                        }
                                      }
                                    >
                                      <component
                                        aria-hidden={true}
                                        className=""
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        width="1em"
                                      >
                                        <SvgEnagementSplit24Px
                                          height="24px"
                                          viewBox="0 0 24 24"
                                          width="24px"
                                        >
                                          <svg
                                            fill="currentColor"
                                            height="24px"
                                            viewBox="0 0 24 24"
                                            width="24px"
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <g
                                              fill="none"
                                              fillRule="evenodd"
                                            >
                                              <path
                                                d="M0 0h24v24H0z"
                                              />
                                              <path
                                                d="M18.19 12.44l-3.24-1.62c1.29-1 2.12-2.56 2.12-4.32 0-3.03-2.47-5.5-5.5-5.5s-5.5 2.47-5.5 5.5c0 2.13 1.22 3.98 3 4.89v3.26c-2.15-.46-2.02-.44-2.26-.44-.53 0-1.03.21-1.41.59L4 16.22l5.09 5.09c.43.44 1.03.69 1.65.69h6.3c.98 0 1.81-.7 1.97-1.67l.8-4.71c.22-1.3-.43-2.58-1.62-3.18zm-.35 2.85l-.8 4.71h-6.3c-.09 0-.17-.04-.24-.1l-3.68-3.68 4.25.89V6.5c0-.28.22-.5.5-.5s.5.22.5.5v6h1.76l3.46 1.73c.4.2.62.63.55 1.06zM8.07 6.5c0-1.93 1.57-3.5 3.5-3.5s3.5 1.57 3.5 3.5c0 .95-.38 1.81-1 2.44V6.5a2.5 2.5 0 00-5 0v2.44c-.62-.63-1-1.49-1-2.44z"
                                                fill="#FFF"
                                                fillRule="nonzero"
                                              />
                                            </g>
                                          </svg>
                                        </SvgEnagementSplit24Px>
                                      </component>
                                    </i>
                                  </LocaleReceiver>
                                </Icon>
                              </StyledComponent>
                            </Styled(Icon)>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </CapIcon>
                  </div>
                </div>
                <styled.div
                  className="node-label"
                  type="label5"
                >
                  <StyledComponent
                    className="node-label"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "CapLabelInline": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "rules": Array [
                              "
font-size: ",
                              [Function],
                              ";
font-weight: ",
                              [Function],
                              ";
color: ",
                              [Function],
                              ";
line-height: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                        "_foldedDefaultProps": Object {
                          "type": "label1",
                        },
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "jAkirh",
                          "rules": Array [
                            "
    font-size: ",
                            [Function],
                            ";
    font-weight: ",
                            [Function],
                            ";
    color: ",
                            [Function],
                            ";
    line-height: ",
                            [Function],
                            ";
    ",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "children": [Function],
                          "type": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="label5"
                  >
                    <div
                      className="sc-ifAKCX jAkirh node-label"
                      type="label5"
                    >
                      Engagement split
                    </div>
                  </StyledComponent>
                </styled.div>
              </CapAdvancedIcon>
            </div>
          </div>
          <div
            className="node-container"
            key="split"
          >
            <div
              className="node-container-inner"
            >
              <CapAdvancedIcon
                backgroundColor="#23cccc"
                dragRef={[Function]}
                label1={
                  <ForwardRef(styled.div)
                    className="node-label"
                    type="label5"
                  >
                    Decision split
                  </ForwardRef(styled.div)>
                }
                svgProps={
                  Object {
                    "height": "24px",
                    "viewBox": "0 0 24 24",
                    "width": "24px",
                  }
                }
                type="split"
              >
                <div
                  className="advanced-icon-container"
                >
                  <div>
                    <CapIcon
                      backgroundProps={
                        Object {
                          "style": Object {
                            "backgroundColor": "#23cccc",
                            "lineHeight": 1,
                            "padding": "9px",
                          },
                        }
                      }
                      style={
                        Object {
                          "color": "#ffffff",
                        }
                      }
                      svgProps={
                        Object {
                          "height": "24px",
                          "viewBox": "0 0 24 24",
                          "width": "24px",
                        }
                      }
                      type="split"
                      withBackground={true}
                    >
                      <styled.div
                        className="cap-icon-background"
                        style={
                          Object {
                            "backgroundColor": "#23cccc",
                            "lineHeight": 1,
                            "padding": "9px",
                          }
                        }
                      >
                        <StyledComponent
                          className="cap-icon-background"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "jOYlkw",
                                "rules": Array [
                                  "
  background-color: ",
                                  [Function],
                                  ";
  border-radius: 18px;
  padding: ",
                                  [Function],
                                  ";
  display: inline-block;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          style={
                            Object {
                              "backgroundColor": "#23cccc",
                              "lineHeight": 1,
                              "padding": "9px",
                            }
                          }
                        >
                          <div
                            className="sc-htpNat jOYlkw cap-icon-background"
                            style={
                              Object {
                                "backgroundColor": "#23cccc",
                                "lineHeight": 1,
                                "padding": "9px",
                              }
                            }
                          >
                            <Styled(Icon)
                              className="cap-icon-v2 cap-icon-v2-split"
                              component={[Function]}
                              style={
                                Object {
                                  "color": "#ffffff",
                                }
                              }
                            >
                              <StyledComponent
                                className="cap-icon-v2 cap-icon-v2-split"
                                component={[Function]}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "kZDkVS",
                                      "rules": Array [
                                        "
  font-size: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "createFromIconfontCN": [Function],
                                    "displayName": "Styled(Icon)",
                                    "foldedComponentIds": Array [],
                                    "getTwoToneColor": [Function],
                                    "render": [Function],
                                    "setTwoToneColor": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                style={
                                  Object {
                                    "color": "#ffffff",
                                  }
                                }
                              >
                                <Icon
                                  className="sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-split"
                                  component={[Function]}
                                  style={
                                    Object {
                                      "color": "#ffffff",
                                    }
                                  }
                                >
                                  <LocaleReceiver
                                    componentName="Icon"
                                  >
                                    <i
                                      className="anticon sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-split"
                                      style={
                                        Object {
                                          "color": "#ffffff",
                                        }
                                      }
                                    >
                                      <component
                                        aria-hidden={true}
                                        className=""
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        width="1em"
                                      >
                                        <SvgSplit
                                          height="24px"
                                          viewBox="0 0 24 24"
                                          width="24px"
                                        >
                                          <svg
                                            fill="currentColor"
                                            height="24px"
                                            viewBox="0 0 24 24"
                                            width="24px"
                                            xmlns="http://www.w3.org/2000/svg"
                                            xmlnsXlink="http://www.w3.org/1999/xlink"
                                          >
                                            <defs>
                                              <path
                                                d="M14 4l2.29 2.29-2.88 2.88 1.42 1.42 2.88-2.88L20 10V4h-6zm-4 0H4v6l2.29-2.29 4.71 4.7V20h2v-8.41l-5.29-5.3L10 4z"
                                                id="split_svg__a"
                                              />
                                            </defs>
                                            <g
                                              fill="none"
                                              fillRule="evenodd"
                                            >
                                              <mask
                                                fill="#fff"
                                                id="split_svg__b"
                                              >
                                                <use
                                                  xlinkHref="#split_svg__a"
                                                />
                                              </mask>
                                              <use
                                                fill="#000"
                                                fillRule="nonzero"
                                                transform="rotate(90 12 12)"
                                                xlinkHref="#split_svg__a"
                                              />
                                              <g
                                                fill="#FFF"
                                                mask="url(#split_svg__b)"
                                              >
                                                <path
                                                  d="M0 0h24v24H0z"
                                                />
                                              </g>
                                            </g>
                                          </svg>
                                        </SvgSplit>
                                      </component>
                                    </i>
                                  </LocaleReceiver>
                                </Icon>
                              </StyledComponent>
                            </Styled(Icon)>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </CapIcon>
                  </div>
                </div>
                <styled.div
                  className="node-label"
                  type="label5"
                >
                  <StyledComponent
                    className="node-label"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "CapLabelInline": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "rules": Array [
                              "
font-size: ",
                              [Function],
                              ";
font-weight: ",
                              [Function],
                              ";
color: ",
                              [Function],
                              ";
line-height: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                        "_foldedDefaultProps": Object {
                          "type": "label1",
                        },
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "jAkirh",
                          "rules": Array [
                            "
    font-size: ",
                            [Function],
                            ";
    font-weight: ",
                            [Function],
                            ";
    color: ",
                            [Function],
                            ";
    line-height: ",
                            [Function],
                            ";
    ",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "children": [Function],
                          "type": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="label5"
                  >
                    <div
                      className="sc-ifAKCX jAkirh node-label"
                      type="label5"
                    >
                      Decision split
                    </div>
                  </StyledComponent>
                </styled.div>
              </CapAdvancedIcon>
            </div>
          </div>
        </div>
      </div>
      <div
        className="category-container"
        key="Actions"
      >
        <div
          className="title-row"
        >
          <styled.div
            type="h4"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "CapHeadingSpan": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bwzfXH",
                      "isStatic": false,
                      "rules": Array [
                        "
font-size: ",
                        [Function],
                        ";
font-weight: ",
                        [Function],
                        ";
color: ",
                        [Function],
                        ";
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bwzfXH",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                  "_foldedDefaultProps": Object {
                    "type": "h5",
                  },
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "kZeOKr",
                    "rules": Array [
                      "
    font-size: ",
                      [Function],
                      ";
    font-weight: ",
                      [Function],
                      ";
    color: ",
                      [Function],
                      ";
    line-height: ",
                      [Function],
                      ";
    ",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "propTypes": Object {
                    "children": [Function],
                    "type": [Function],
                  },
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              type="h4"
            >
              <div
                className="sc-bdVaJa kZeOKr"
                type="h4"
              >
                Actions
              </div>
            </StyledComponent>
          </styled.div>
          <CapTooltip
            title="actions nodes"
          >
            <Tooltip
              arrowPointAtCenter={false}
              autoAdjustOverflow={true}
              mouseEnterDelay={0.1}
              mouseLeaveDelay={0.1}
              overlayClassName="cap-tooltip-overlay-v2"
              placement="top"
              title="actions nodes"
              transitionName="zoom-big-fast"
            >
              <Tooltip
                align={Object {}}
                arrowContent={null}
                arrowPointAtCenter={false}
                autoAdjustOverflow={true}
                builtinPlacements={
                  Object {
                    "bottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tc",
                        "bc",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "bottomLeft": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tl",
                        "bl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "bottomRight": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tr",
                        "br",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "left": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "cr",
                        "cl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "leftBottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "br",
                        "bl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "leftTop": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tr",
                        "tl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "right": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "cl",
                        "cr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "rightBottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bl",
                        "br",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "rightTop": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tl",
                        "tr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "top": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bc",
                        "tc",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "topLeft": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bl",
                        "tl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "topRight": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "br",
                        "tr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                  }
                }
                destroyTooltipOnHide={false}
                mouseEnterDelay={0.1}
                mouseLeaveDelay={0.1}
                onPopupAlign={[Function]}
                onVisibleChange={[Function]}
                overlay="actions nodes"
                overlayClassName="cap-tooltip-overlay-v2"
                placement="top"
                prefixCls="ant-tooltip"
                title="actions nodes"
                transitionName="zoom-big-fast"
                trigger={
                  Array [
                    "hover",
                  ]
                }
                visible={false}
              >
                <Trigger
                  action={
                    Array [
                      "hover",
                    ]
                  }
                  afterPopupVisibleChange={[Function]}
                  arrowContent={null}
                  arrowPointAtCenter={false}
                  autoAdjustOverflow={true}
                  blurDelay={0.15}
                  builtinPlacements={
                    Object {
                      "bottom": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tc",
                          "bc",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "bottomLeft": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tl",
                          "bl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "bottomRight": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tr",
                          "br",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "left": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          -4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "cr",
                          "cl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "leftBottom": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          -4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "br",
                          "bl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "leftTop": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          -4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tr",
                          "tl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "right": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "cl",
                          "cr",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "rightBottom": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bl",
                          "br",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "rightTop": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          4,
                          0,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tl",
                          "tr",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "top": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bc",
                          "tc",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "topLeft": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bl",
                          "tl",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                      "topRight": Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "br",
                          "tr",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      },
                    }
                  }
                  defaultPopupVisible={false}
                  destroyPopupOnHide={false}
                  focusDelay={0}
                  getDocument={[Function]}
                  getPopupClassNameFromAlign={[Function]}
                  hideAction={Array []}
                  mask={false}
                  maskClosable={true}
                  mouseEnterDelay={0.1}
                  mouseLeaveDelay={0.1}
                  onPopupAlign={[Function]}
                  onPopupVisibleChange={[Function]}
                  overlay="actions nodes"
                  popup={[Function]}
                  popupAlign={Object {}}
                  popupClassName="cap-tooltip-overlay-v2"
                  popupPlacement="top"
                  popupStyle={Object {}}
                  popupTransitionName="zoom-big-fast"
                  popupVisible={false}
                  prefixCls="ant-tooltip"
                  showAction={Array []}
                  title="actions nodes"
                  visible={false}
                >
                  <CapIcon
                    className="info-icon"
                    key="trigger"
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                    size="xs"
                    type="info"
                  >
                    <Styled(Icon)
                      className="cap-icon-v2 cap-icon-v2-info info-icon"
                      component={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      size="xs"
                    >
                      <StyledComponent
                        className="cap-icon-v2 cap-icon-v2-info info-icon"
                        component={[Function]}
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bxivhb",
                              "isStatic": false,
                              "lastClassName": "kZDkVS",
                              "rules": Array [
                                "
  font-size: ",
                                [Function],
                                ";
",
                              ],
                            },
                            "createFromIconfontCN": [Function],
                            "displayName": "Styled(Icon)",
                            "foldedComponentIds": Array [],
                            "getTwoToneColor": [Function],
                            "render": [Function],
                            "setTwoToneColor": [Function],
                            "styledComponentId": "sc-bxivhb",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        size="xs"
                      >
                        <Icon
                          className="sc-bxivhb fYYxJD cap-icon-v2 cap-icon-v2-info info-icon"
                          component={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          size="xs"
                        >
                          <LocaleReceiver
                            componentName="Icon"
                          >
                            <i
                              className="anticon sc-bxivhb fYYxJD cap-icon-v2 cap-icon-v2-info info-icon"
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              size="xs"
                            >
                              <component
                                aria-hidden={true}
                                className=""
                                fill="currentColor"
                                focusable="false"
                                height="1em"
                                width="1em"
                              >
                                <SvgInfo>
                                  <svg
                                    fill="currentColor"
                                    height="1em"
                                    viewBox="0 0 24 24"
                                    width="1em"
                                  >
                                    <path
                                      d="M12 11a1 1 0 0 1 1 1v4a1 1 0 0 1-2 0v-4a1 1 0 0 1 1-1zm0-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 4.5a1.5 1.5 0 1 0 .001 3.001A1.5 1.5 0 0 0 12 6.5zM12 20c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"
                                      id="info_svg__a"
                                    />
                                  </svg>
                                </SvgInfo>
                              </component>
                            </i>
                          </LocaleReceiver>
                        </Icon>
                      </StyledComponent>
                    </Styled(Icon)>
                  </CapIcon>
                </Trigger>
              </Tooltip>
            </Tooltip>
          </CapTooltip>
        </div>
        <div
          className="icons-container"
        >
          <div
            className="node-container"
            key="userAttributeChange"
          >
            <div
              className="node-container-inner"
            >
              <CapAdvancedIcon
                backgroundColor="#2466ea"
                dragRef={[Function]}
                label1={
                  <ForwardRef(styled.div)
                    className="node-label"
                    type="label5"
                  >
                    User attribute c...
                  </ForwardRef(styled.div)>
                }
                svgProps={
                  Object {
                    "height": "24px",
                    "viewBox": "0 0 24 24",
                    "width": "24px",
                  }
                }
                type="userAttributeChange"
              >
                <div
                  className="advanced-icon-container"
                >
                  <div>
                    <CapIcon
                      backgroundProps={
                        Object {
                          "style": Object {
                            "backgroundColor": "#2466ea",
                            "lineHeight": 1,
                            "padding": "9px",
                          },
                        }
                      }
                      style={
                        Object {
                          "color": "#ffffff",
                        }
                      }
                      svgProps={
                        Object {
                          "height": "24px",
                          "viewBox": "0 0 24 24",
                          "width": "24px",
                        }
                      }
                      type="userAttributeChange"
                      withBackground={true}
                    >
                      <styled.div
                        className="cap-icon-background"
                        style={
                          Object {
                            "backgroundColor": "#2466ea",
                            "lineHeight": 1,
                            "padding": "9px",
                          }
                        }
                      >
                        <StyledComponent
                          className="cap-icon-background"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "jOYlkw",
                                "rules": Array [
                                  "
  background-color: ",
                                  [Function],
                                  ";
  border-radius: 18px;
  padding: ",
                                  [Function],
                                  ";
  display: inline-block;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          style={
                            Object {
                              "backgroundColor": "#2466ea",
                              "lineHeight": 1,
                              "padding": "9px",
                            }
                          }
                        >
                          <div
                            className="sc-htpNat jOYlkw cap-icon-background"
                            style={
                              Object {
                                "backgroundColor": "#2466ea",
                                "lineHeight": 1,
                                "padding": "9px",
                              }
                            }
                          >
                            <Styled(Icon)
                              className="cap-icon-v2 cap-icon-v2-userAttributeChange"
                              component={[Function]}
                              style={
                                Object {
                                  "color": "#ffffff",
                                }
                              }
                            >
                              <StyledComponent
                                className="cap-icon-v2 cap-icon-v2-userAttributeChange"
                                component={[Function]}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "kZDkVS",
                                      "rules": Array [
                                        "
  font-size: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "createFromIconfontCN": [Function],
                                    "displayName": "Styled(Icon)",
                                    "foldedComponentIds": Array [],
                                    "getTwoToneColor": [Function],
                                    "render": [Function],
                                    "setTwoToneColor": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                style={
                                  Object {
                                    "color": "#ffffff",
                                  }
                                }
                              >
                                <Icon
                                  className="sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-userAttributeChange"
                                  component={[Function]}
                                  style={
                                    Object {
                                      "color": "#ffffff",
                                    }
                                  }
                                >
                                  <LocaleReceiver
                                    componentName="Icon"
                                  >
                                    <i
                                      className="anticon sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-userAttributeChange"
                                      style={
                                        Object {
                                          "color": "#ffffff",
                                        }
                                      }
                                    >
                                      <component
                                        aria-hidden={true}
                                        className=""
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        width="1em"
                                      >
                                        <SvgUserAudienceAttributechange
                                          height="24px"
                                          viewBox="0 0 24 24"
                                          width="24px"
                                        >
                                          <svg
                                            fill="currentColor"
                                            height="24px"
                                            viewBox="0 0 24 24"
                                            width="24px"
                                            xmlns="http://www.w3.org/2000/svg"
                                            xmlnsXlink="http://www.w3.org/1999/xlink"
                                          >
                                            <defs>
                                              <path
                                                d="M22 13v3.306h-3.306l1.144-1.112c-.6-.595-1.177-.754-2.088-.754-1.823 0-2.81.987-2.81 2.81s.987 2.81 2.81 2.81 2.81-.987 2.81-2.81H22A4.25 4.25 0 1117.75 13c1.176 0 2.238.477 3.003 1.247L22 13zm-10 0c.58 0 1.285.063 2.033.19a5.502 5.502 0 00-1.174 1.851A9.227 9.227 0 0012 15c-2.618 0-5.612 1.213-5.974 1.943L6 17.01V18h6.59c.134.727.41 1.404.8 2H4v-3c0-2.66 5.33-4 8-4zm0-9c2.21 0 4 1.79 4 4s-1.79 4-4 4-4-1.79-4-4 1.79-4 4-4zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
                                                id="user-audience-attributechange_svg__a"
                                              />
                                            </defs>
                                            <g
                                              fill="none"
                                              fillRule="evenodd"
                                            >
                                              <path
                                                d="M0 0h24v24H0z"
                                              />
                                              <mask
                                                fill="#fff"
                                                id="user-audience-attributechange_svg__b"
                                              >
                                                <use
                                                  xlinkHref="#user-audience-attributechange_svg__a"
                                                />
                                              </mask>
                                              <use
                                                fill="#3B3939"
                                                fillRule="nonzero"
                                                xlinkHref="#user-audience-attributechange_svg__a"
                                              />
                                              <g
                                                fill="#FFF"
                                                mask="url(#user-audience-attributechange_svg__b)"
                                              >
                                                <path
                                                  d="M0 0h24v24H0z"
                                                />
                                              </g>
                                            </g>
                                          </svg>
                                        </SvgUserAudienceAttributechange>
                                      </component>
                                    </i>
                                  </LocaleReceiver>
                                </Icon>
                              </StyledComponent>
                            </Styled(Icon)>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </CapIcon>
                  </div>
                </div>
                <styled.div
                  className="node-label"
                  type="label5"
                >
                  <StyledComponent
                    className="node-label"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "CapLabelInline": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "rules": Array [
                              "
font-size: ",
                              [Function],
                              ";
font-weight: ",
                              [Function],
                              ";
color: ",
                              [Function],
                              ";
line-height: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                        "_foldedDefaultProps": Object {
                          "type": "label1",
                        },
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "jAkirh",
                          "rules": Array [
                            "
    font-size: ",
                            [Function],
                            ";
    font-weight: ",
                            [Function],
                            ";
    color: ",
                            [Function],
                            ";
    line-height: ",
                            [Function],
                            ";
    ",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "children": [Function],
                          "type": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="label5"
                  >
                    <div
                      className="sc-ifAKCX jAkirh node-label"
                      type="label5"
                    >
                      User attribute c...
                    </div>
                  </StyledComponent>
                </styled.div>
              </CapAdvancedIcon>
            </div>
          </div>
          <div
            className="node-container"
            key="api"
          >
            <div
              className="node-container-inner"
            >
              <CapAdvancedIcon
                backgroundColor="#2466ea"
                dragRef={[Function]}
                label1={
                  <ForwardRef(styled.div)
                    className="node-label"
                    type="label5"
                  >
                    API call
                  </ForwardRef(styled.div)>
                }
                svgProps={
                  Object {
                    "height": "24px",
                    "viewBox": "0 0 24 24",
                    "width": "24px",
                  }
                }
                type="api"
              >
                <div
                  className="advanced-icon-container"
                >
                  <div>
                    <CapIcon
                      backgroundProps={
                        Object {
                          "style": Object {
                            "backgroundColor": "#2466ea",
                            "lineHeight": 1,
                            "padding": "9px",
                          },
                        }
                      }
                      style={
                        Object {
                          "color": "#ffffff",
                        }
                      }
                      svgProps={
                        Object {
                          "height": "24px",
                          "viewBox": "0 0 24 24",
                          "width": "24px",
                        }
                      }
                      type="api"
                      withBackground={true}
                    >
                      <styled.div
                        className="cap-icon-background"
                        style={
                          Object {
                            "backgroundColor": "#2466ea",
                            "lineHeight": 1,
                            "padding": "9px",
                          }
                        }
                      >
                        <StyledComponent
                          className="cap-icon-background"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "jOYlkw",
                                "rules": Array [
                                  "
  background-color: ",
                                  [Function],
                                  ";
  border-radius: 18px;
  padding: ",
                                  [Function],
                                  ";
  display: inline-block;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          style={
                            Object {
                              "backgroundColor": "#2466ea",
                              "lineHeight": 1,
                              "padding": "9px",
                            }
                          }
                        >
                          <div
                            className="sc-htpNat jOYlkw cap-icon-background"
                            style={
                              Object {
                                "backgroundColor": "#2466ea",
                                "lineHeight": 1,
                                "padding": "9px",
                              }
                            }
                          >
                            <Styled(Icon)
                              className="cap-icon-v2 cap-icon-v2-api"
                              component={[Function]}
                              style={
                                Object {
                                  "color": "#ffffff",
                                }
                              }
                            >
                              <StyledComponent
                                className="cap-icon-v2 cap-icon-v2-api"
                                component={[Function]}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bxivhb",
                                      "isStatic": false,
                                      "lastClassName": "kZDkVS",
                                      "rules": Array [
                                        "
  font-size: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "createFromIconfontCN": [Function],
                                    "displayName": "Styled(Icon)",
                                    "foldedComponentIds": Array [],
                                    "getTwoToneColor": [Function],
                                    "render": [Function],
                                    "setTwoToneColor": [Function],
                                    "styledComponentId": "sc-bxivhb",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                style={
                                  Object {
                                    "color": "#ffffff",
                                  }
                                }
                              >
                                <Icon
                                  className="sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-api"
                                  component={[Function]}
                                  style={
                                    Object {
                                      "color": "#ffffff",
                                    }
                                  }
                                >
                                  <LocaleReceiver
                                    componentName="Icon"
                                  >
                                    <i
                                      className="anticon sc-bxivhb kZDkVS cap-icon-v2 cap-icon-v2-api"
                                      style={
                                        Object {
                                          "color": "#ffffff",
                                        }
                                      }
                                    >
                                      <component
                                        aria-hidden={true}
                                        className=""
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        width="1em"
                                      >
                                        <SvgApi
                                          height="24px"
                                          viewBox="0 0 24 24"
                                          width="24px"
                                        >
                                          <svg
                                            fill="currentColor"
                                            height="24px"
                                            viewBox="0 0 24 24"
                                            width="24px"
                                            xmlns="http://www.w3.org/2000/svg"
                                            xmlnsXlink="http://www.w3.org/1999/xlink"
                                          >
                                            <defs>
                                              <path
                                                d="M14 12l-2 2-2-2 2-2 2 2zm-2-6l2.12 2.12 2.5-2.5L12 1 7.38 5.62l2.5 2.5L12 6zm-6 6l2.12-2.12-2.5-2.5L1 12l4.62 4.62 2.5-2.5L6 12zm12 0l-2.12 2.12 2.5 2.5L23 12l-4.62-4.62-2.5 2.5L18 12zm-6 6l-2.12-2.12-2.5 2.5L12 23l4.62-4.62-2.5-2.5L12 18z"
                                                id="api-24-px_svg__a"
                                              />
                                            </defs>
                                            <g
                                              fill="none"
                                              fillRule="evenodd"
                                            >
                                              <path
                                                d="M0 0h24v24H0z"
                                              />
                                              <mask
                                                fill="#fff"
                                                id="api-24-px_svg__b"
                                              >
                                                <use
                                                  xlinkHref="#api-24-px_svg__a"
                                                />
                                              </mask>
                                              <use
                                                fill="#000"
                                                fillRule="nonzero"
                                                xlinkHref="#api-24-px_svg__a"
                                              />
                                              <g
                                                fill="#FFF"
                                                mask="url(#api-24-px_svg__b)"
                                              >
                                                <path
                                                  d="M0 0h24v24H0z"
                                                />
                                              </g>
                                            </g>
                                          </svg>
                                        </SvgApi>
                                      </component>
                                    </i>
                                  </LocaleReceiver>
                                </Icon>
                              </StyledComponent>
                            </Styled(Icon)>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </CapIcon>
                  </div>
                </div>
                <styled.div
                  className="node-label"
                  type="label5"
                >
                  <StyledComponent
                    className="node-label"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "CapLabelInline": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-EHOje",
                            "isStatic": false,
                            "rules": Array [
                              "
font-size: ",
                              [Function],
                              ";
font-weight: ",
                              [Function],
                              ";
color: ",
                              [Function],
                              ";
line-height: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.span",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-EHOje",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        },
                        "_foldedDefaultProps": Object {
                          "type": "label1",
                        },
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "jAkirh",
                          "rules": Array [
                            "
    font-size: ",
                            [Function],
                            ";
    font-weight: ",
                            [Function],
                            ";
    color: ",
                            [Function],
                            ";
    line-height: ",
                            [Function],
                            ";
    ",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "propTypes": Object {
                          "children": [Function],
                          "type": [Function],
                        },
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="label5"
                  >
                    <div
                      className="sc-ifAKCX jAkirh node-label"
                      type="label5"
                    >
                      API call
                    </div>
                  </StyledComponent>
                </styled.div>
              </CapAdvancedIcon>
            </div>
          </div>
        </div>
      </div>
    </div>
  </CapJourneySidebar>
</DndProvider>
`;

exports[`CapJourneySidebar test should render default component if no node is passed 1`] = `
<DndProvider
  backend={[Function]}
>
  <CapJourneySidebar>
    <div
      className="journey-sidebar-container"
    >
      <div
        className="title-row"
      >
        <styled.div
          type="h3"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "CapHeadingSpan": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": false,
                    "rules": Array [
                      "
font-size: ",
                      [Function],
                      ";
font-weight: ",
                      [Function],
                      ";
color: ",
                      [Function],
                      ";
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
                "_foldedDefaultProps": Object {
                  "type": "h5",
                },
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bdVaJa",
                  "isStatic": false,
                  "lastClassName": "eWyphC",
                  "rules": Array [
                    "
    font-size: ",
                    [Function],
                    ";
    font-weight: ",
                    [Function],
                    ";
    color: ",
                    [Function],
                    ";
    line-height: ",
                    [Function],
                    ";
    ",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "propTypes": Object {
                  "children": [Function],
                  "type": [Function],
                },
                "render": [Function],
                "styledComponentId": "sc-bdVaJa",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            type="h3"
          >
            <div
              className="sc-bdVaJa eWyphC"
              type="h3"
            />
          </StyledComponent>
        </styled.div>
        <CapTooltip>
          <Tooltip
            arrowPointAtCenter={false}
            autoAdjustOverflow={true}
            mouseEnterDelay={0.1}
            mouseLeaveDelay={0.1}
            overlayClassName="cap-tooltip-overlay-v2"
            placement="top"
            transitionName="zoom-big-fast"
          >
            <Tooltip
              align={Object {}}
              arrowContent={null}
              arrowPointAtCenter={false}
              autoAdjustOverflow={true}
              builtinPlacements={
                Object {
                  "bottom": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      0,
                      4,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "tc",
                      "bc",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "bottomLeft": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      0,
                      4,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "tl",
                      "bl",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "bottomRight": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      0,
                      4,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "tr",
                      "br",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "left": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      -4,
                      0,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "cr",
                      "cl",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "leftBottom": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      -4,
                      0,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "br",
                      "bl",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "leftTop": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      -4,
                      0,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "tr",
                      "tl",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "right": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      4,
                      0,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "cl",
                      "cr",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "rightBottom": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      4,
                      0,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "bl",
                      "br",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "rightTop": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      4,
                      0,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "tl",
                      "tr",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "top": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      0,
                      -4,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "bc",
                      "tc",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "topLeft": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      0,
                      -4,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "bl",
                      "tl",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "topRight": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      0,
                      -4,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "br",
                      "tr",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                }
              }
              destroyTooltipOnHide={false}
              mouseEnterDelay={0.1}
              mouseLeaveDelay={0.1}
              onPopupAlign={[Function]}
              onVisibleChange={[Function]}
              overlay=""
              overlayClassName="cap-tooltip-overlay-v2"
              placement="top"
              prefixCls="ant-tooltip"
              transitionName="zoom-big-fast"
              trigger={
                Array [
                  "hover",
                ]
              }
              visible={false}
            >
              <Trigger
                action={
                  Array [
                    "hover",
                  ]
                }
                afterPopupVisibleChange={[Function]}
                arrowContent={null}
                arrowPointAtCenter={false}
                autoAdjustOverflow={true}
                blurDelay={0.15}
                builtinPlacements={
                  Object {
                    "bottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tc",
                        "bc",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "bottomLeft": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tl",
                        "bl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "bottomRight": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tr",
                        "br",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "left": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "cr",
                        "cl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "leftBottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "br",
                        "bl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "leftTop": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        -4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tr",
                        "tl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "right": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "cl",
                        "cr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "rightBottom": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bl",
                        "br",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "rightTop": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        4,
                        0,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tl",
                        "tr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "top": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bc",
                        "tc",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "topLeft": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bl",
                        "tl",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                    "topRight": Object {
                      "ignoreShake": true,
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 1,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "br",
                        "tr",
                      ],
                      "targetOffset": Array [
                        0,
                        0,
                      ],
                    },
                  }
                }
                defaultPopupVisible={false}
                destroyPopupOnHide={false}
                focusDelay={0}
                getDocument={[Function]}
                getPopupClassNameFromAlign={[Function]}
                hideAction={Array []}
                mask={false}
                maskClosable={true}
                mouseEnterDelay={0.1}
                mouseLeaveDelay={0.1}
                onPopupAlign={[Function]}
                onPopupVisibleChange={[Function]}
                overlay=""
                popup={[Function]}
                popupAlign={Object {}}
                popupClassName="cap-tooltip-overlay-v2"
                popupPlacement="top"
                popupStyle={Object {}}
                popupTransitionName="zoom-big-fast"
                popupVisible={false}
                prefixCls="ant-tooltip"
                showAction={Array []}
                visible={false}
              >
                <CapIcon
                  className="info-icon"
                  key="trigger"
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                  size="xs"
                  type="info"
                >
                  <Styled(Icon)
                    className="cap-icon-v2 cap-icon-v2-info info-icon"
                    component={[Function]}
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                    size="xs"
                  >
                    <StyledComponent
                      className="cap-icon-v2 cap-icon-v2-info info-icon"
                      component={[Function]}
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bxivhb",
                            "isStatic": false,
                            "lastClassName": "fYYxJD",
                            "rules": Array [
                              "
  font-size: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "createFromIconfontCN": [Function],
                          "displayName": "Styled(Icon)",
                          "foldedComponentIds": Array [],
                          "getTwoToneColor": [Function],
                          "render": [Function],
                          "setTwoToneColor": [Function],
                          "styledComponentId": "sc-bxivhb",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      size="xs"
                    >
                      <Icon
                        className="sc-bxivhb fYYxJD cap-icon-v2 cap-icon-v2-info info-icon"
                        component={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        size="xs"
                      >
                        <LocaleReceiver
                          componentName="Icon"
                        >
                          <i
                            className="anticon sc-bxivhb fYYxJD cap-icon-v2 cap-icon-v2-info info-icon"
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            size="xs"
                          >
                            <component
                              aria-hidden={true}
                              className=""
                              fill="currentColor"
                              focusable="false"
                              height="1em"
                              width="1em"
                            >
                              <SvgInfo>
                                <svg
                                  fill="currentColor"
                                  height="1em"
                                  viewBox="0 0 24 24"
                                  width="1em"
                                >
                                  <path
                                    d="M12 11a1 1 0 0 1 1 1v4a1 1 0 0 1-2 0v-4a1 1 0 0 1 1-1zm0-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 4.5a1.5 1.5 0 1 0 .001 3.001A1.5 1.5 0 0 0 12 6.5zM12 20c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"
                                    id="info_svg__a"
                                  />
                                </svg>
                              </SvgInfo>
                            </component>
                          </i>
                        </LocaleReceiver>
                      </Icon>
                    </StyledComponent>
                  </Styled(Icon)>
                </CapIcon>
              </Trigger>
            </Tooltip>
          </Tooltip>
        </CapTooltip>
      </div>
      <styled.div
        type="label3"
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "CapLabelInline": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-EHOje",
                  "isStatic": false,
                  "rules": Array [
                    "
font-size: ",
                    [Function],
                    ";
font-weight: ",
                    [Function],
                    ";
color: ",
                    [Function],
                    ";
line-height: ",
                    [Function],
                    ";
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-EHOje",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
              "_foldedDefaultProps": Object {
                "type": "label1",
              },
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-ifAKCX",
                "isStatic": false,
                "lastClassName": "kDVSyQ",
                "rules": Array [
                  "
    font-size: ",
                  [Function],
                  ";
    font-weight: ",
                  [Function],
                  ";
    color: ",
                  [Function],
                  ";
    line-height: ",
                  [Function],
                  ";
    ",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "propTypes": Object {
                "children": [Function],
                "type": [Function],
              },
              "render": [Function],
              "styledComponentId": "sc-ifAKCX",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          type="label3"
        >
          <div
            className="sc-ifAKCX kDVSyQ"
            type="label3"
          />
        </StyledComponent>
      </styled.div>
    </div>
  </CapJourneySidebar>
</DndProvider>
`;
